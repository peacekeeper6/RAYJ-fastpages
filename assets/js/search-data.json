{
  
    
        "post0": {
            "title": "Anti-Hero by Taylor Swift",
            "content": "“Anti-hero” . “Taylor Swift scores one of the most historic weeks in the 64-year history of the Billboard Hot 100 songs chart, as she becomes the first artist to claim the survey’s entire top 10 in a single frame. . Swift surpasses Drake, who logged nine of the Hot 100’s top 10 for a week in September 2021. . Leading the way for Swift on the Hot 100, “Anti-Hero” launches at No. 1, marking her ninth career leader.” -Billboard .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/16",
            "relUrl": "/points/16",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "We Don't Talk About Bruno",
            "content": "“We don’t talk about Bruno” . “Maybe we’re not allowed to talk about him, but people were definitely listening to “Bruno,” with the secretive, salsa-tinged showstopper becoming only the second Hot 100 No. 1 from a Disney animated film, and the longest-running chart-topper (five weeks) for any song from a Disney movie. The song was built for repeat listening, with mile-a-minute lyrics and its finale of Les Miz-level vocal stacking. It even had its own TikTok trend, thanks to the meme-able way Camilo (Rhenzy Feliz) drawls those spooky “7-foot frame, rats along his back” lines. Basically, Lin-Manuel Miranda figured out how to make a song that perfectly advanced the Family Madrigal’s narrative, while also soundtracking countless school drop-offs and dramatic road-trip sing-alongs.” ~BillBoard .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/16",
            "relUrl": "/points/16",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Project Week 2",
            "content": "Plans Week 9 . Focus on PBL - Commitment to your Agile Development process and tangibles. . Monday: Review Student Led Homework (Period 2?) and Blog | Tuesday: Student Presentation | Wednesday: Student Presentation | Thursday: Show FE to BE working, Script for Video | Friday: Student Presentation | . Team . Prepare for Teacher project audit. Also, analysis of the following will speed Scrum Team plan, work, improve quality, and make a better N@tM final. . API Frontend to Backend Overview . Show demo of work in progress. . Must use API across multiple systems Create a HTML Frontend table or view fetching from Backend using an Spring API | Show writing to Database | . | . Scrum Master . Describe Program Purpose and Function. Also, highlight key system used to track, collaborate and review software. . Identify and Apply a Software Development process. Describe your Software Development Life Cycle | Describe how you plan, track sprints, track features, track milestones, and assign versions. | Highlight Agile process: research, design, coding, testing, review, repeat. | . | Define and analyze systems and software requirements. Define Computer Systems you have or will develop. | Indicate Tools or Automation you will use improve tracking requirements (ie Project/Scrum Board). | Define strategies that enable Team to target the specific needs of the customer (ie Product Owner). Describe meetings, demos, and how you collect feedback. | . | Test and Demo Software during each Sprint Consider using GitHub Issues to support this process. | Develop and describe expectations of each feature. | Use feature, expected outcome, and the minimal amount of code each feature. | Document accomplishment with tangible evidence. | Have feature reviews, demos, and obtain feedback (team and/or customer) | Update and derive new features and tasks for next step in Software Development Life Cycle | . | My suggestion is this person helps with Frontend development | . Frontend Developer . Describe Frontend designs and coding techniques. . Create and implement an effective frontend between humans and technology Show frontend design artifacts (wire frames) | Describe any consideration you have made for customer requirements. | Indicate accommodations you have made for English Language Learners or those with Disabilities | Show any screens that are currently developed. | . | Describe Code and Styles Frontend development HTML, Markdown, JavaScript | Cards, Tables, Blogging | . | Comments. Be sure to illustrate developers comments in code and how this will facilitate current and future understanding of the key portions of system. | . DevOps Engineer . Describe the technical systems and processes used to ensure the ability to do continuous updates and integration of software. . Describe software and programming tools Identify authoring tools (IDE’s, Docker, GitHub) used | Describe and/or show visuals of interactions and integration of programming languages, protocols, and data within project. For instance, deployed systems of Docker Images, Nginx, DNS hosting the application. | Describe and/or illustrate key Web Applications, APIs, and dependency systems that will be required to complete this system (Diagram). | . | Describe GitHub branch management and sociology used to ensure ability to perform continuous builds and integrations. GitHub projects | Branching Strategies | Deployment processes and automation | . | Describe how to validate and test the complete system | My suggestion is this person helps with Backend development | . Backend Developer . Describe backend coding and requirements. . Develop data, data types, databases, and APIs. Identify authoring tools (IDE’s, Postman) used. | Describe and/or illustrate key data types, data structures (Lists, Dictionaries), objects, files, or databases that will be used (Flow Chart/UML). | Describe use of Lists or Dictionaries, database, tables, attributes, records, and systems of access (JSON, Lists, Dictionaries). | . | Comments. Be sure developers use comments in code to facilitate current and future understanding of the key portions of system. | . Hacks (Video 1). Recommend… Minimize talking, minimize mouse movements, and share Tangibles. . Make a less than 4 minute video. Each individual should talk in video, code, and make their part of the video. Consider crossing over to other tables and share methods and methodologies of those working on similar roles. . Scrum Master should make sure all things come together. | DevOps should ensure there is a working project to Demo at all times. | Everyone should complete their part(s). | Everyone should help other Team Members when struggling. | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/9",
            "relUrl": "/points/9",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Project Week 1",
            "content": "Cancelled . Plans Week 8 . Focus on PBL - Commitment to your Agile Development process and tangibles. . Monday: Stand-up Meetings, Live Review | Tuesday: Code, Code, Code, Live Review | Wednesday: Unit 1 Student Presentation | Thursday: Unit 2 Student Presentation | Friday: Code, Code, Code | . Team Points . Prepare for CTE Auditors, Oct 20th. Additionally, this is recommendation season. Analysis of the following will speed Scrum Team work, improve quality of Recommendation, prepare you to discuss progress with auditors (if you are selected) and make a better N@tM final. Look at the following criteria… . Identify and Apply a Software Development process. Describe your Software Development Life Cycle | Describe how you plan, track sprints, track features, track milestones, and assign versions. | Highlight Agile process: research, design, coding, testing, review, repeat. | . | Define and analyze systems and software requirements. Define Computer Systems you will develop. | Indicate Tools or Automation you will use improve tracking requirements. | Define strategies that enable Team to target the specific needs of the customer (ie Product Owner)meetings, demos, and collecting feedback. | . | Create and implement and effective frontend between humans and technology Show frontend design artifacts (wire frames) | Describe any consideration you have made for customer needs. | Indicate accommodations you have made for English Language Learners or those with Disabilities | . | Develop software using programming languages Identify authoring tools (IDE’s, Docker) used | Describe and/or show visuals which interactions and integration of programming languages, protocols, and data within project (Flow Chart/UML). | Describe and/or illustrate key Procedures, Functions, Algorithms that will be required to complete this system (Flow Chart/UML). | Be sure to use comments in code to facilitate current and future understanding of the key portions of system. | . | Develop data, data types, databases, and APIs. Identify authoring tools (IDE’s, Postman) used. | Describe and/or illustrate key data types, data structures, objects, files, and databases that will be used (Flow Chart/UML). | Describe use of database, tables, attributes, records, and systems of access (POJOs, JPAs) | Be sure to use comments in code to facilitate current and future understanding of the key portions of data. | . | Test and Demo Software during each Sprint Consider using GitHub Issues to support this process. | Develop and describe expectations of each feature. | Use feature, expected outcome, and the minimal amount of code each feature. | Document accomplishment with tangible evidence. | Have feature reviews, demos, and obtain feedback (team and/or customer) | Update and derive new features and tasks for next step in Software Development Life Cycle | . | . Individual Points . Each individual should prepare for each Sprint and Reflection meeting on successes or failure within the project. Highlight things that involve the following… . Collaboration | Communication | Critical Thinking | Creativity | . Presenter Points . Assignments from Student Lectures. . Unit 1 | Unit 2 | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/8",
            "relUrl": "/points/8",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Deployment Files and Conventions",
            "content": "Communication on Machines, Project, Port, Docker Image, and Nginx . It would be nice if there were some standards published. Here are some ideas. It takes about 15 minutes to plan or hours to fix. . P1: nighthawkcoders.tk . Period | Table | Port | Project | image_nm | nginx | subdomain | . 1 | 1 | 8011 | T1_ |   |   |   | . 1 | 2 | 8012 | T2_ |   |   |   | . 1 | 3 | 8013 | T3_ |   |   |   | . 1 | 4 | 8014 | T4_ |   |   |   | . 1 | 5 | 8015 | T5_ |   |   |   | . 1 | 6 | 8016 | T6_ |   |   |   | . 1 | 7 | 8017 | T7_fantasy-fb | fantasy-fb_v1 |   |   | . P2: nighthawkcoding.ml . Period | Table | Port | Project | image_nm | nginx | subdomain | . 2 | 1 | 8091 | t1_juiceVRLD | juiceVRLD_v1 |   |   | . 2 | 2 | 8092 | T2_ |   |   |   | . 2 | 3 | 8093 | T3_ |   |   |   | . 2 | 4 | 8094 | t4_csateam | csateam_v1 |   |   | . 2 | 5 | 8095 | T5_ |   |   |   | . 2 | 6 | 8096 | t6-breadbops |   |   |   | . Notes from Rohan J . For Period 2, to avoid port conflicts please use port 809#, where # is your table number, for your docker containers. (Table 10 use 8100). For NGINX files please start the filename with T# (as Mr. M said). . I’ve seen some issues when working with docker containers with duplicate container names in the docker-compose files in different projects. Therefore, please replace “web” in docker-compose with “web_t#” to ensure each container has a unique name (period 2) &amp; replace “javaspring_v1” w/ “javaspring_v1_t#” in docker-compose.yml . Docker, Issues requirements . Using docker-compose.yml establish a method to version and name container. Consider how this version can be unified with Git and Issues. . Sample Names from Yeung’s CSP . Here is project naming example for GitHub Projects P4 and P5 from Mr Yeung . ubuntu@ncs-cf:~$ pwd /home/ubuntu ubuntu@ncs-cf:~$ ls T8041_sane T8044_MVQN T8047_lash T8051_ZestyYeung T8054_Scrum_Daddys T8057_CASA T8042_TAAL T8045_peacock T8048_united-rice-cubes T8052_udderly_delectable T8055_Sport T8058_time T8043_FriendshipTable T8046_dogs T8049_thedreamteam T8053_Flask_Swag T8056_berries T8059_lyntax .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/c1.5/2022/10/10/PBL-deployment_files.html",
            "relUrl": "/c1.5/2022/10/10/PBL-deployment_files.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "POJO, JPA, API, FE",
            "content": "Runtime Link . Back-end Java Spring MVC Files . Java Database . A POJO is the foundation for making an Entity that is turned into a Database. The Java Persistent API (JPA) allows Developer to interact with the Database with fairly straightforward code. An API allows you to share and store data from your community of users. The pieces are described in this blog. . . POJO and @Entity Definition . This code shows power of Spring Annotations and Java, with a little bit of code a Developer is opening up persistent data storage, a database. . import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.*; @Data // Annotations to simplify writing code (ie constructors, setters) @NoArgsConstructor @AllArgsConstructor @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class Jokes { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier @Column(unique=true) private String joke; // The Joke private int haha; // Store joke likes private int boohoo; // Store joke jeers } . Java Persistence API (JPA) . The JPA is created to access the database. The JokesJpaRepository interface extends JpaRepository. This allows the developer access predefined and additionally define useful interfaces to access their persistent storage. . import java.util.List; import org.springframework.data.jpa.repository.JpaRepository; // JPA is an object-relational mapping (ORM) to persistent data, originally relational databases (SQL). Today JPA implementations has been extended for NoSQL. public interface JokesJpaRepository extends JpaRepository&lt;Jokes, Long&gt; { // JPA has many built in methods, these few have been prototyped for this application void save(String Joke); // A List&lt;Jokes&gt; findAllByOrderByJokeAsc(); // returns a List of Jokes in Ascending order List&lt;Jokes&gt; findByJokeIgnoreCase(String joke); // look to see if Joke(s) exist } . List and ArrayList . List is a super class to ArrayList. This illustration shows relationship. In the JPA code you can see that List of Jokes is common result from JPA. As a database is a series of rows, accessing a List or and ArrayList is done through similar iteration. Here is illustration of List and ArrayList from GeeksForGeeks . . Controller and APIs . The last backend piece of the process of accessing the database is building out the RESTful API services to access the data. Below is the JokesApiController, this is commented extensively. This has many AP and PBL elements. . @Autowired annotation provides full access to JokesJpaRepository, what we made with the code above. Review repository., there are actions for set, get, save and more. | @GetMapping and @PutMapping which establishes endpoints for RESTful web services to access the data. | API data structuring elements @PathVariable and “return new ResponseEntity” these are keys for obtaining and returning data from the accessor. | . import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; import java.util.List; import java.util.Optional; @RestController // annotation to simplify the creation of RESTful web services @RequestMapping(&quot;/api/jokes&quot;) // all requests in file begin with this URI public class JokesApiController { // Autowired enables Control to connect URI request and POJO Object to easily for Database CRUD operations @Autowired private JokesJpaRepository repository; /* GET List of Jokes * @GetMapping annotation is used for mapping HTTP GET requests onto specific handler methods. */ @GetMapping(&quot;/&quot;) public ResponseEntity&lt;List&lt;Jokes&gt;&gt; getJokes() { // ResponseEntity returns List of Jokes provide by JPA findAll() return new ResponseEntity&lt;&gt;( repository.findAll(), HttpStatus.OK); } /* Update Like * @PutMapping annotation is used for mapping HTTP PUT requests onto specific handler methods. * @PathVariable annotation extracts the templated part {id}, from the URI */ @PutMapping(&quot;/like/{id}&quot;) public ResponseEntity&lt;Jokes&gt; setLike(@PathVariable long id) { /* * Optional (below) is a container object which helps determine if a result is present. * If a value is present, isPresent() will return true * get() will return the value. */ Optional&lt;Jokes&gt; optional = repository.findById(id); if (optional.isPresent()) { // Good ID Jokes joke = optional.get(); // value from findByID joke.setHaha(joke.getHaha()+1); // increment value repository.save(joke); // save entity return new ResponseEntity&lt;&gt;(joke, HttpStatus.OK); // OK HTTP response: status code, headers, and body } // Bad ID return new ResponseEntity&lt;&gt;(HttpStatus.BAD_REQUEST); // Failed HTTP response: status code, headers, and body } /* Update Jeer */ @PutMapping(&quot;/jeer/{id}&quot;) public ResponseEntity&lt;Jokes&gt; setJeer(@PathVariable long id) { Optional&lt;Jokes&gt; optional = repository.findById(id); if (optional.isPresent()) { // Good ID Jokes joke = optional.get(); joke.setBoohoo(joke.getBoohoo()+1); repository.save(joke); return new ResponseEntity&lt;&gt;(joke, HttpStatus.OK); } // Bad ID return new ResponseEntity&lt;&gt;(HttpStatus.BAD_REQUEST); } } . Front End . This database was setup to allow people to HaHa or Boohoo a collection of Computer Jokes. The entirety has lot of limitation. . People can vote more than once and in both categories. | There is no auto refresh if several are voting and updating as you are looking at your static page. | Perhaps Q and A style could hide punch line. | Perhaps we could accept new jokes, or have interface for adding them. | . Amazingly, though … the front-end code is in a completely different project. The front end project GETs and PUTs using the back end APIs. The key element that makes this different than other public APIs, like RapidAPI, is the “reaction” function. This function updates the elementID of the like or jeer as soon as you impact the button. . Frontend JavaScript Code . // Reaction function to likes or jeers user actions function reaction(type, put_url, elemID) { // fetch the API fetch(put_url, put_options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&quot;PUT API response failure: &quot; + response.status) return; // api failure } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); // Likes or Jeers updated/incremented if (type === HAHA) // like data element document.getElementById(elemID).innerHTML = data.haha; // fetched haha data assigned to haha Document Object Model (DOM) else if (type === BOOHOO) // jeer data element document.getElementById(elemID).innerHTML = data.boohoo; // fetched boohoo data assigned to boohoo Document Object Model (DOM) else error(&quot;unknown type: &quot; + type); // should never occur }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + put_url); }); } . Hacks . AP required. Review the lambok annotations (https://projectlombok.org/features/). . Write the POJO without using lambok | . PBL foundational. Establish a POJO, JPA and APIs in your own project. You can begin with Jokes. . Make new POJO attribute. FYI, as there is not database upgrade. I suggest deleting /volumes/sqlite.db to ensure schema is updated. | Make a new API endpoint. | Test your API using Postman. You should be able to test with localhost:port. | Build frontend in different system. | . Resources . Googling will find some references. . Something free, but different than mine. Youtube. Here is another, but maybe less Youtube | All of these cost money. 5 Best Spring Data JPA Courses for Java developers to Learn in 2022. | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/1.a/3.a/3.b/c4.5/c4.7/2022/10/03/TT-pojo.html",
            "relUrl": "/1.a/3.a/3.b/c4.5/c4.7/2022/10/03/TT-pojo.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Last CB Topic - ArrayList",
            "content": "Plans Week 7 . Focus PBL approval - Focus on Databases, Queries (Lists) and Front-end to Back-end . Monday: Introductions and Scheduling for CB presentations, Live Review | Tuesday: Live Review, Tech Talk Part 1 - Backend, POJOS, and Lists | Wednesday: Live Review, Tech Talk Part 2 - Frontend to Backend | Thursday: Human Prep - GitHub | Friday: Code, Code, Code | . List and ArrayLists (Pair) . Show usage of Lists interfaces in a Jupyter Notebook example. Try using List interface and making a ArrayList object. Consider using an example that will be part of interest or final projects. This will probably become your favorite Data Structure in Java. . add(int index, element) This method is used to add an element at a particular index in the list. When a single parameter is passed, it simply adds the element at the end of the list. | addAll(int index, Collection collection) This method is used to add all the elements in the given collection to the list. When a single parameter is passed, it adds all the elements of the given collection at the end of the list. | size() This method is used to return the size of the list. | clear() This method is used to remove all the elements in the list. However, the reference of the list created is still stored. | remove(int index) This method removes an element from the specified index. It shifts subsequent elements(if any) to left and decreases their indexes by 1. | remove(element) This method is used to remove the first occurrence of the given element in the list. | get(int index) This method returns elements at the specified index. | set(int index, element) This method replaces elements at a given index with the new element. This function returns the element which was just replaced by a new element. | indexOf(element) This method returns the first occurrence of the given element or -1 if the element is not present in the list. | lastIndexOf(element) This method returns the last occurrence of the given element or -1 if the element is not present in the list. | equals(element) This method is used to compare the equality of the given element with the elements of the list. | hashCode() This method is used to return the hashcode value of the given list. | isEmpty() This method is used to check if the list is empty or not. It returns true if the list is empty, else false. | contains(element) This method is used to check if the list contains the given element or not. It returns true if the list contains the element. | containsAll(Collection collection) This method is used to check if the list contains all the collection of elements. | sort(Comparator comp) This method is used to sort the elements of the list on the basis of the given comparator. | . Try to get a Front-end to Back-end example working (Team) . I am very excited about accessing data from one Web Application to Another. This is the basis of modern computing ‘microservice architecture’. . Highly maintainable and testable (learn to use Postman for APIs testing, learn to use Jupyter notebook for testing) | Loosely coupled (frontend and backend can be developed independently) | Independently deployable (frontend and backend are not in same GitHub project) | Owned by distinct and small teams (frontend and backend ) | . Live Grading Presentation.  . Two teams at a time in review. The review meeting would consist of 4 x 1.5 minute presentations on Notebooks and 2 x 3 minute presentations on FE to BE. Optimization is encouraged!!! . 5 meetings per class, 20 minutes per meeting. Meetings will be cutoff and 20 minutes. | Scoring .9x1 on Notebook, .9x1 on Team, .9x1 on Presentation and packing everything into 20 minutes. | The review may be more interesting is if you learn how to share microservice capabilities across teams. That would be impressive. | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/7",
            "relUrl": "/points/7",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "GitHub and Git Sociology",
            "content": ". GitHub and Git . GitHub.com was launched in April 2008 by Tom Preston-Werner, Chris Wanstrath, P. J. Hyett and Scott Chaco. GitHub is a subsidiary of Microsoft since 2018 (kind of ironic with Git quote below), but GitHub is not Git it helps manage the server or backend. . Linus Torvalds invented Linux and about 2005 invented Git. Quotes by Linus: . “Talk is cheap. Show me the code.” | “Most good programmers do programming not because they expect to get paid or get adulation by the public, but because it is fun to program.” | Microsoft isn’t evil; they just make really crappy operating systems. | . In our environments, Git is local and it works with GitHub/Git is in the cloud. Together these tools together have become an industry standard since about 2015. Formerly in industry we used tools like (ClearCase and Perforce), before the 90s we had home brewed systems. Kind of like making smart backups of files. . Terms and Usage . A brief review of key commands and concepts. . A “git clone” makes a local Git repository (decentralized) from the cloud server (GitHub/Git). | A .git directory contains a local database (see illustration) that keeps track of local changes. | A “git commit” makes a child snapshot of the original parent on the local database. Git commits over time are a series of Secure Hashing Algorithms (SHA’s). This is the math behind a git snapshot. | The .gitignore file tells .git to ignore certain files in directory tree (ie files constructed from source or derived files, like ipynb files that turn into md files). | The “git push” command moves files from local system back to cloud server (GitHub). However, often a merge is required as the decentralized system can have many simultaneous contributors. Students will experience this when they share a repository. | To minimize conflicts, Developers use Git branches and/or GitHub Forks to push code to an isolated locations on the server/cloud. This simply delays the inevitable merge, but has benefit of keeping developers branch of project stable. | Pull requests is common process used to merge code from isolated Fork back to the primary GitHub repository. | A “git rebase” is a common command for Developer on an isolated Git branch to update their environment from the “main” branch. Often this is done prior to a “git push” back the “main” branch. | . Project Based Learning . In Project Based Learning, it is required that you have a policy on Contributing Guidelines. Many student have already experienced problems of merging and managing change, by editing code GitHub directly, while editing code on VSCode locally. This will be an every day occurrence when starting a GitHub/Git sociology. Thus, teams need to create a policy to communicate how Scrum Team or Others should contribute to your project. . GitHub and VSCode | . Hacks . Any sociology questions within team need to be answered with a Blog, A Scrum Master working with other Developers should establish the Github administration/sociology policies: . What is the main repository for your project? | Did you create a .gitignore to avoid committing files that ‘don’t belong in version control? Look at this tool for guidance. | Have you established Issues as part of your Development process? Creating Issues | Have you considered making Pull Requests to track development? Create Pull Request | Have you considered forks or branching techniques with pull requests? Link Issue to PR | Are you managing Issues on a Project Board/Scrum Board like Kanban? Tracking Issues | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/techtalk/github",
            "relUrl": "/techtalk/github",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Virtual Private Networks",
            "content": "What Are VPN’s? . Virtual Private Networks, or VPNs establish a protected network connection when using public networks. VPNs encrypt your internet traffic and disguise your online identity. This makes it more difficult for third parties to track your activities online and steal data. . How Does A VPN Work . A VPN hides your IP address by letting the network redirect it through a specially configured remote server run by a VPN host. This means that if you surf online with a VPN, the VPN server becomes the source of your data. This means your Internet Service Provider (ISP) and other third parties cannot see which websites you visit or what data you send and receive online, and which can only be accessed if one’s VPN gets hacked; however, that is extremely unlikely to happen because VPN’s are very securely encrypted. A VPN works like a filter that turns all your data into “gibberish”. Even if someone were to get their hands on your data, it would be useless. . Setting Up A VPN (MacOS) . Navigate to your browser and search for a VPN and follow the websites directions for installation | Go to “System Preferences” and then “Network” | Click on the plus sign in the bottom left corner and use the drop-down menu to choose your VPN | Fill in the details for your chosen VPN in the fields “VPN Type” and “Service Name” | Create a new VPN network and fill in your “Server Address,” “Remote ID” and “Local ID” | Enter “Authentication Settings” and add your username and password | Click “OK” and Connect your VPN | Setting Up A VPN (Windows) . Navigate to your browser and search for a VPN and follow the websites directions for installation | Move into “Settings” and click on “Network” and then “VPN” | Click “Add a VPN” and fill out the fields for “Server Name,” “VPN Type” and your account information, which should be shared by the VPN provider you chose | Save your VPN | Go back into “VPN,” click on your newly added account and press “Connect” | Using A VPN . There are a host of different reasons to use a VPN. Below, I have listed a few reasons to sue a VPN . Make public Wi-Fi more secure | Protect your mobile devices | Hide your IP address | Data Privacy From Your Internet Service Provider | Data Privacy From the Apps and Services You Use | Access to Any Content in Any Place (Streaming shows that are on other countries Netflix) | Les likely to get hacked | . Recommended Software (Free) . Proton VPN Free | Privado VPN | Windscribe | Atlas VPN | Hide.me | Betternet (500 MB per day, as long as you don’t overuse data for one day which is extremely unlikely to happen) | . Recommended Software (Paid) . ExpressVPN (~$9/month) | SurfShark ($5/month) - :warning: Likely won’t work on school wifi | NordVPN ($3.69/month for 2 years) - :warning: Likely won’t work on school wifi | ProtonVPN ($6/month) | IPVanish ($3.33/month for the first year, then $7.5/month) | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/tutorial/vpn",
            "relUrl": "/tutorial/vpn",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Project Approval",
            "content": "Plans Week 6 . Focus PBL approval - Let’s look deeper at projects and see if they will work. . Monday: Live Review | Tuesday: Live Review, Test Prep | Wednesday: Live Review, Career Tech | Thursday: Human Prep | Friday: Code, Code, Code | . Arrays and Images, (Pair/Individual) . Working with 2D arrays in conjunction with image manipulation. Follow guidelines in Hacks. . Fetch and Backed RapidAPI. (Pair/Individual) . Find an API and implement Fetch following Covid example. Answer these questions in implementation… . Benefit of using and API? | Benefit(s) of backend implementation? | Review Meeting (Team) . Convince teacher of value and team interest in project. . Live Grading Presentation.  . One team at a time. At the review session, there will be a 2nd approval for the Trimester 1 project and looking how pairs progressed with Images and RapidAPI. . Focus will be on value and interest. Technical objective should include each person showing something they will add to project. Additionally, determine if images or rapid apis can complement your project. | Pairs present on Images and RapidAPI work. .9/1 x 2 | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/6",
            "relUrl": "/points/6",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Program Design",
            "content": ". Project Planning . Look for a real need, Teacher/Student need, Educational Study or Simulation, Campus Club, Campus Interest, Business Interest, Charitable Organization, mimic portions of a system like Amazon, etc. Of course, the greatest interest is Student Interest. The project will not work if only one student is interested. - Program Purpose and Function. Think about inputs, outputs, UI, and data that will be in the program. - Be sure to pick something that you don’t burn out on after a couple of weeks. If you are a couple days into something and it is not working it is best to change. - IMO, it is much more interesting to work on something that has 3rd party interest or that you design something with intention to acquire a 3rd party interest. Working on something to acquire accolades is a big motivator. . Begin a code base. Some of ideation may come in play with code. This could also be done in Jupyter Notebooks. | Data Abstraction. UML is pictured in article. Think about how data will be formed and managed. | Managing Complexity. Think about frontend and backend portions of the system. Remember that objective is to use JavaScript in frontend and Python in backend. | Procedural Abstraction. Design some of the key objects of the system. Think about the key elements of User Design. This should help you divide work amongst team. Effectually, you will be creating the sub systems of the system in this design effort. | Algorithm Implementation. The key aspects of your project and its algorithms must be considered and prototyped early. This will help you understand capabilities of team and some of the longer/research required activities. | Testing. Be sure that you are performing iteration and testing as you go. Do not stack things up or integrate infrequently. Develop, Integrate, Test a couple of times weekly!!! Also, think about the things that needs to be tested. Think about how to put data into the system to ensure quality is produced and everything is easily validated. | . Teacher Needs . PBL. Concept/Idea in CSP Education. This could be achieved using Blogging and Jupyter. Some have said, it is possible to pass the AP exam in 1 month of study. This would be several 1 hour lessons. . Highlight all 5 Big Ideas from CB. | Remake CB site to be Student Friendly, More Code, and less Video. | The Web Site covers key topics from CB, also includes Mini-labs, and thus should be interactive. The code and visuals should teach more than the words. | FRQs could be challenges or hack-a-thon activities that could enhance a Test Prep sessions. | . PBL. Concept/Idea around Classroom Management. Build data for a series of classroom needs. This could be CompSci, but these requirements are for me. . A system were students can do administration. Users and Passwords. A single source for all projects to minimize duplication of data across periods and transitions during year. Graduation year would be a big key, to active or alumni. | Access through accounts RESTful API | User Setting and Attributes for students to be self updated | . | Attributes Name, Grad year, and some other basics (birth day without year) | Password integration with Email | GitHUB ID, Slack ID | Track student history Track All GitHub projects for the user through Year (Tri 1,2,3) | Track all Period through year | Roles of Development for User through Year | Scrum Teams and other students worked with | Pull sources like GitHub commits | Runtime project that are alive | . | Integration with GithUb pages, ability to Comment on assignments | . | Backup of Data to JSON | Restore Data from JSON | . Last year Projects. I have access to student projects from last year that were never finished. Working on them and extending them is often better than starting from nothing. . Hacks . Now is time to transition to Design and Development. Designs are required and must meet Teacher Approval. If you get negative feedback act quickly. Designs should be put together around a Blog. . Brain Write. The process of just elaborating on ideas and sharing them with your team. | Wire Frame, Concept. Before coding start to outline what the project will look like. | Modeling or UML. Behavior, Interaction, Data diagrams | . Additionally, some development of Concepts can/should occur. This should be focused on frontend or backend concepts. . Frontend. Wire Frame development is better than coding, at early stages. But if you have clear idea and can articulate it in HTML or CSS it is OK to work there as well. | Backend. Jupyter notebooks is a great way to thing about data and outputs. Often a console program can help you imagine data as well as interaction. | . This work does not need to be finished in trimester. .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/collegeboard/design",
            "relUrl": "/collegeboard/design",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Design Starters",
            "content": "Plans Week 5 . Focus PBL design - Coming up with practical design illustration using elements provided during week. Make a real effort. . Monday: No School | Tuesday: Live Review, Test Prep | Wednesday: Live Review, Career Tech | Thursday: Human Prep | Friday: Code, Code, Code | . Fibo, Extends and Data Modeling (Individual) . This is a check to see how you have absorbed extending a class. Follow guidelines in Hacks. . JavaScript and HTML (Individual) . This is renew on HTML and JavaScript expectations. Using JavaScript introduction and referring to code for Jokes. Show ability in Jupyter Notebook or JavaScript to process a JavaScript data structure into an HTML presentation. Follow guidelines in Hacks. . Design (Team) . Establish preliminary design ideas for 1st Trimester project. Follow guidelines in Hacks. . Live Grading Presentation.  . We will follow 3 to 4 team review format. At the review session, there will be an approval for the Trimester 1 project. . Focus will be on Team Design reviews. Technical objective should include Frontend and Backend in different Web Applications | Large amounts of data (100’s to 1000’s of rows), usage of APIs recommended | . | Grades and reviews on Fibo and JavaScript prior to meeting. .9/1 x 2 | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/5",
            "relUrl": "/points/5",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Java Spring/Thymeleaf",
            "content": "Tour of Frontend . . This visual shows files for a Java Spring Boot Web Application project. The frontend of the project contains HTML files that are infused with Thymeleaf. Each frontend file has a backend has a Controller that loads the HTML template. In this illustration Greet.java loads greet.html, Birds.java loads birds.html, index.html is using default/non-visible Controller to load its page. This article will discuss the HTML files, the backend will discuss the Java files Read more or review files in the Spring Boot Reference Documentation . . HTML page (index.html) . The index.html file is infused with page specific fragments via Thymeleaf, it uses layouts/base.html as the template. Thus, files in this project are NOT pure HTML. The Thymeleaf pre-processor runs across all HTML files in this project, taking fragments and base to form pure HTML prior to files being sent to the Web Browser. Review comments in source code for understanding … . &lt;!-- This page is illustrative and contains ideas about HTML formatting --&gt; &lt;!DOCTYPE HTML&gt; &lt;!-- Signals HTML to understand Thymeleaf Layout Dialect --&gt; &lt;html xmlns:layout=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot; layout:decorate=&quot;~{layouts/base}&quot; lang=&quot;en&quot;&gt; &lt;head&gt; &lt;!-- Thymeleaf inserts below th:block into the &lt;head&gt; from layout/base.html --&gt; &lt;th:block layout:fragment=&quot;head&quot; th:remove=&quot;tag&quot;&gt; &lt;title&gt;Intro&lt;/title&gt; &lt;/th:block&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Thymeleaf inserts below into the &lt;body&gt; from layout/base.html --&gt; &lt;th:block layout:fragment=&quot;body&quot; th:remove=&quot;tag&quot;&gt; &lt;!-- Start of body content specific to page --&gt; &lt;div class=&quot;px-5 py-5 mx-auto&quot;&gt; &lt;h1&gt;&lt;strong&gt;Java Home Page&lt;/strong&gt;&lt;/h1&gt; &lt;!-- This page uses BootStrap defined in layout/base.html --&gt; &lt;div class=&quot;row&quot;&gt; &lt;!-- each row has 12 logical positions --&gt; &lt;div class=&quot;col-4&quot;&gt; &lt;!-- each card is grated 4 positions, 3 cards to a row --&gt; &lt;div class=&quot;card&quot;&gt; &lt;img class=&quot;card-img-top&quot; th:src=&quot;@{/images/java.png}&quot; alt=&quot;Java Development&quot; height=&quot;250&quot;&gt; &lt;div class=&quot;card-body&quot;&gt; &lt;h5 class=&quot;card-title&quot;&gt;What should Java Developers learn?&lt;/h5&gt; &lt;p class=&quot;card-text&quot;&gt; &lt;ol&gt; &lt;li&gt;Java 11-17 is used for PBL. Java 8 appears to be College Board standard. Java features like Reactive Streams, HTTP2 client, JShell, React JS are more recent than 8.&lt;/li&gt; &lt;li&gt;GitHub. Learning to master managing change, branches, pull requests, and more.&lt;/li&gt; &lt;li&gt;Development DevOps. Java programmers should have a passion for managing the environment and learning automation (Git, Maven, Docker).&lt;/li&gt; &lt;li&gt;REST and Microservice using Spring. Mastering creating and consuming RESTful APIs&lt;/li&gt; &lt;/ol&gt; &lt;/p&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot;&gt;Go somewhere&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-4&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;img class=&quot;card-img-top&quot; th:src=&quot;@{/images/spring.png}&quot; alt=&quot;Spring Development&quot; height=&quot;250&quot;&gt; &lt;div class=&quot;card-body&quot;&gt; &lt;h5 class=&quot;card-title&quot;&gt;What is Spring?&lt;/h5&gt; &lt;p class=&quot;card-text&quot;&gt; &lt;ol&gt; &lt;li&gt;Spring Framework is the most popular application development framework of Java. &lt;/li&gt; &lt;li&gt;Spring Boot helps to create a stand-alone application with less configuration.&lt;/li&gt; &lt;li&gt;Spring MVC is a model view controller-based web framework under the Spring framework.&lt;/li&gt; &lt;li&gt;ThymeLeaf is a server-side Java template engine, supports HTML5 JVM web development, and provides full integration with Spring Framework.&lt;/li&gt; &lt;/ol&gt; &lt;/p&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot;&gt;Go somewhere&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-4&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;img class=&quot;card-img-top&quot; th:src=&quot;@{/images/pojo.jpeg}&quot; alt=&quot;Java Persistence&quot; height=&quot;250&quot;&gt; &lt;div class=&quot;card-body&quot;&gt; &lt;h5 class=&quot;card-title&quot;&gt;How do you create Persistent data?&lt;/h5&gt; &lt;p class=&quot;card-text&quot;&gt; &lt;ol&gt; &lt;li&gt;Java Persistent API (JPA) provides a query language that allows create, read, update, and delete objects from a database.&lt;/li&gt; &lt;li&gt;Beans, Controller Code, and Business logic interact with the JPA to manage data in and out of the Database.&lt;/li&gt; &lt;li&gt;An Object-Relational Model (ORM) mapping Java classes (entities + supporting structures) with a relational database&lt;/li&gt; &lt;li&gt;Plain Old Java Objects (POJO) are the Class definitions that are foundations for JPA and ORM, see the @entity declaration over the Class definition.&lt;/li&gt; &lt;/ol&gt; &lt;/p&gt; &lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot;&gt;Go somewhere&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- End of body content specific to page --&gt; &lt;/th:block&gt; &lt;/body&gt; &lt;/html&gt; . Layouts Folder . This folder contains a base.html and two fragments: footer.html and nav.html. These files form the standards for each HTML page in this Web Application project. The layouts/base.html is structural beginning file for index.html, greet.html, birds.html or any future file added to this project. This connection is made at the top of each HTML template, layout:decorate=”~{layouts/base}”. . As you look at the contents of the layouts/base.html think of it as the structure and common contents that will be in every HTML file. As you look back at the index.html, consider that it is starting with layouts/base.html and inserting its page specific fragments for the head and body. . Thymeleaf will put all these things together through a pre-process step. In the end, every HTML pages that is given to the Web Browser has style and structure from layouts/base, but content from its own HTML head and body. . &lt;!-- This page is illustrative and contains ideas about HTML layouts --&gt; &lt;!DOCTYPE HTML&gt; &lt;html xmlns:layout=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot;&gt; &lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt; &lt;!-- JQuery CSS --&gt; &lt;script th:src=&quot;@{https://code.jquery.com/jquery-3.3.1.slim.min.js}&quot; integrity=&quot;sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link th:href=&quot;@{https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css}&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC&quot; crossorigin=&quot;anonymous&quot;&gt; &lt;!-- Project CSS --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; th:href=&quot;@{/scss/custom.css}&quot;&gt; &lt;th:block layout:fragment=&quot;head&quot; th:remove=&quot;tag&quot;&gt;Head details are added by ThymeLeaf layout consumer&lt;/th:block&gt; &lt;/head&gt; &lt;body&gt; &lt;th:block th:replace=&quot;layouts/nav :: header&quot; th:remove=&quot;tag&quot;&gt;Standard header and Navigation&lt;/th:block&gt; &lt;th:block layout:fragment=&quot;body&quot; th:remove=&quot;tag&quot;&gt;Body details are added by ThymeLeaf layout consumer&lt;/th:block&gt; &lt;th:block th:replace=&quot;layouts/footer :: footer&quot; th:remove=&quot;tag&quot;&gt;Standard footer&lt;/th:block&gt; &lt;!-- Bootstrap 5.0 Bundle with Popper --&gt; &lt;script th:src=&quot;@{https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js}&quot; integrity=&quot;sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;th:block layout:fragment=&quot;script&quot; th:remove=&quot;tag&quot;&gt;&lt;/th:block&gt; &lt;/html&gt; . Resources Overview . . Resources are structure in standard directories for many reasons: familiarity amongst developer, tool defaults, deployment defaults, cache optimizations, etc. Here are some of introductions: . static/images - this is where a web server typically expects images that do not change after deployment. Service in deployment will cache these files for quick loading over the internet. | static/sccs - these are cached as well. This location and the sccs name state this will work with node tools. The standard is called Sassy and is the same as used in Python Flask projects. | templates/error - error pages can be placed here. Can you guess were you would put a 500 error page. | application.properties - this resource is used to define defaults for the application. Most of these default are used by backed, for instance this will be used to define location of a database. This is similar to __init__.py. | . .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/techtalk/spring_thymeleaf",
            "relUrl": "/techtalk/spring_thymeleaf",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Free Response Question No. 1",
            "content": "Plans Week 4 . Focus on FRQ No. 1 - Methods and Control Structures. . Monday: Live Review | Tuesday: Test Prep | Wednesday: Career Tech | Thursday: Human Prep | Friday: Code, Code, Code | . Points will be awarded on these three key elements . FRQ . During the year we want to learn the four types of FRQs. This week we want to focus on the first type. . FRQ No. 1: Methods and control structures (Focus) Pick question type 01 from one of the years posted on the former EXAM page. Solve the problem, including missing pieces in a Jupyter Notebook. | Make this a quality blog. My suggestion is Pairs do different FRQs and crossovers do the same, to make grading more valuable. | Browse through multiple questions, find a question that may be somewhat like a PBL interest. | . | . Future FRQs . FRQ No. 2: Classes | FRQ No. 3: Array/ArrayList | FRQ No. 4: 2D Array | . Iteration Mini-lab - 1 . It is really import that student learn to iterate through Arrays, ArrayLists, and 2D arrays. The most important aspect of this lesson, all which can pop up in testing… . Change or add data to the 2D arrays | Displaying vertically and horizontally | Display backwards or upside down | . Live Grading Presentation.  . On Live grading day each team will present to 3 other Tables/Teams while presenting to the Teacher. Each team will have 5-10 minutes to go over their FRQ, Mini-lab. . Crossover Team Review and Review Ticket. | . Presentation. Introduce lesson and introduce how you plan to present the Material(s). . Have parts that each person will go over. | Consider an activity or illustration other than Code, Code, Code to learn about Methods and Control Structures. | Outside sources can be used to complement the lesson: College Board, Khan Academy, Code.org | It would be interesting if you adapt Iteration Mini-lab and the Methods and Control Structures question to work together. This would show your ability to plan and produce something useful. | . Every time Teacher Live Review requirements. . Create Comment in this Points Blog.  Include crossover grades, crossover comments, and blog(s) used during week. | Jupyter Notebooks contain comments and markdown cells that describe work. | Output of Jupyter Notebook is required when posting the Blog. | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/4",
            "relUrl": "/points/4",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Agile Methodology",
            "content": "Agile Methodology . . Agile software development uses practices such as pair programming, test-driven development, stand-ups, planning sessions, and sprints. Agile includes the 12 Principles expressed in the Manifesto for Agile Software Development. . . Roles . To ensure transparency during the sprint the Team should meet daily at the daily scrum ( sometimes called a standup). As adaptation for classroom, Team should have a standup meeting for weekly plans, should have assignments for tasks, assignments for integration and deployment. . Scrum Master: The scrum master helps to facilitate the sprint by ensuring that an agile framework is followed. He/she is committed to tracking issues and maintaining scrum boards, but should also remain flexible and open to opportunities for the team to improve their workflow. | DevOps: DevOps is the combination of cultural philosophies, practices, and tools that increases an team’s ability to deliver applications and services at high velocity: version control, integration, managing dependencies, POM file management, AWS deployment are some of the key functions that impact velocity. | Development Team: The development team can be comprised of all kinds of people including designers, writers, presenters, developers, etc. Two key roles in Web Development are … Frontend Developer: A front-end developer builds the front-end portion of websites and web applications—that is, the part that users actually see and interact with. | Backend Developer: Back-end developers a build and maintain the mechanisms that process data and perform actions like data storage, security, and other server-side functions that you cannot see. | . | . Workload . When planning there is an expectation of time. . Individual in Class Time. You should expect 3 to 4 hours of productive classroom work each week. | Individual at Home Time. To maintain pace in this class, you should consider a 2 hour coding or design session (weekly) outside of class time. | Sprint Calculation Time. 5-6 hours of coding or planning per week per individual, or 20-24 hours per team. If we had a two week Sprint this would be 40-48 hours of work. | Key to success. Make great use of time in class. Pair share programming typically provides three time dividend over individual programming when you are learning something new. | . Issues . Sprint cadences have ideas/issues that are broken into short term work units called tasks. . Scrum Board / GitHub Project / Kanban Style . The Scrum Board contains issues that are assigned to individuals, each of these issues will have tangible deliverable links (code/video/…). Scrum Team will use Scrum Board to understand everyone’s ideas and efforts. This includes individual tasks. Use GitHub Projects add Issues to the board. Issues are placed in columns on a Scrum Board (Kanban) to represent progress. The below columns have been successful in our academic environment. . To do/backlog | In progress | Complete | Deployed | Done | Sprint . Sprint is a period of time that Team uses to plan work and execute work. This includes planning, research, development, deployment, and test. Typically, sprints will be 2 weeks or longer in the classroom. Anytime a sprint lasts longer than a week, there will be a weekly Review Tickets (formative assessment) and concluding with an end of Review Ticket (summative assessment). Sample sprint follows… . Week 1 Monday - Sprint Objectives, Scrum Team Planning | Tuesday - Test Prep Tuesday (Student Led) | Wednesday - Code, Code, Code | Thursday - Tech Talk (Teacher) | Friday - Code, Code, Code; Teacher 1 v 2, formative review | 2 hours outside of class for project work | . | Week 2 Monday - Sprint Crossover Grading, Scrum Team Planning | Tuesday - Test Prep Tuesday (Student Led) | Wednesday - Code, Code, Code | Thursday - Tech Talk (Teacher) | Friday - Code, Code, Code; Teacher 1 v 4 including Demos/Review Ticket/Peer, summative review | 2 hours outside of class for project work | . | . 7 Important Transferable Skills . Assessments / Reviews . During Teacher reviews meetings ( 1 v 2 pair, 1 v 4 team), the pair or team will provide Teacher with an Issues that that will be called a Review Ticket. The issue will be completed, it will reference Tasks Completed and Self/Crossover Score(s). Canvas should be used as a guide to completing a review ticket, make sure you account for everything. Make sure Point total is a the top of ticket, if points are important to you! All assessments will be looking for these 7 elements in your work… . Creativity Creativity doesn’t necessarily mean you paint or draw or sculpt well. Creativity in education and workplace, in many cases, presents itself in terms of how you approach tasks and solve problems, Do you both inside and outside of the box for solutions? Or, do you stick to a planned system? If you solve even the smallest problem, you’ve demonstrated creativity. This skill scales up: Big problems are enlarged small problems; small problems scaled are big problems. Conceptualize problems and solutions | Display foresight | Make connections | Make intelligent inferences | Synthesize ideas and data | . | Critical thinking Solving complex or abstract problems requires critical thinking, especially when the problems are critical. Not only that, but critical thinking skills also enable the discovery of deficiencies that could cause less than optimal results. The ability to take a step back and look at things more critically and say ‘Where might we have to have gotten this wrong?’ or ‘How might we be able to improve this?’ is critical thinking. IIf you can articulate this skill you will stand out! | Critical thinkers head off problems before they arise. And if they do surface, they take them head-on. | . | Communication Effective communication is the crux of everything you do.. It doesn’t matter how creative or intelligent you are, or how many computer languages you know: If you can’t communicate well, your other skills are meaningless. Students are encouraged to talk about how they were able to bring their teams together. Verbal skills. How do you address an audience in terms they can understand. | Listening skills. Learning and understanding without defensiveness. | Writing skills. You need to be able to write in such a way that non-experts will understand. | Technological communication skills. You should be able to discuss highly technical hard skills in a way appropriate to your audience. Communication details are not the same for all audiences. | . | Collaboration through Leadership Leadership skills generally encompass communication, problem-solving and managing conflict, relationship building and being able to get people on your team on board with a mission or project. Leaders are big-picture thinkers who take various interests into account when making major decisions. Leaders are responsible for: Delegating responsibility | Demonstrating effective time management | Initiating new ideas | Major decision-making | Managing conflict | Managing groups | Multitasking | Teaching and mentoring | . | Collaboration - Teamwork Individuals that work well with others. This is a important category mentioned in early school. But it applies to High School, College and adults. Trust is the major difference between working alone versus working in groups. And trust can be hard: Some people are skeptical by nature or want to work through an entire project lifecycle solo. But placing trust in an active, dynamic team provides more than just project completion. Teamwork — a sense of community — elevates spirits and improves productivity. Accepting responsibility | Making and implementing decisions | Managing time wisely | Meeting both short- and long-term goals | Organizing | Setting and meeting deadlines | . | Researching Research is not a process performed by Teacher, Boss, or some upstream process. Everything you do in Technology requires research. Research is a key part of the lifecycle: changing plans, fluctuating results, and roadblocks require research before anyone can take action. Conversing with team members is a form of research: If you’ve asked a peer’s opinion on a technical matter, you’ve performed research. Analyzing information | Brainstorming solutions | Delineating needs and requirements | Extracting information from data | Gathering information | Forecasting possible roadblocks | Setting goals | Solving problems | . | Technical We live in a tech-heavy world, and you need to understand the tech your project requires. Try to stay current with the many technical advancements on your project. Make sure that play with the different softwares and platforms that are part of your environment. Be knowledgeable and speak to the technical things that you are learning. Being easy to work with | Quick to learn | Glad to learn | Failing and always willing to try new things | Willing to open new doors in case of a drastic oversight | . | Hacks . Key deliverables of this Tech Talk… . Build Team Agile Methodology Diagram, add Team Member roles | Create a Scrum Board as output of Team Stand-up Meeting | Build an individual Issue | Add to PBL vocabulary on your GH Pages | . .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/techtalk/agile",
            "relUrl": "/techtalk/agile",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Fastpages local server",
            "content": "It’s often useful to test pages locally before deploying, as it can save time and be helpful for testing quick changes/debugging. In this blog we’ll learn how to deploy fastpages locally using Docker. . Overview of steps . Download Docker desktop | (For Windows) Set up Docker with WSL | Run make server in repo directory | Click in terminal or type localhost link show (ex. http://127.0.0.1:4000/{repo name}) to view your Fastpages Blog site. | 1. Installation . Docker is a lightweight method to build, deploy, run, update and manage containers. Download Docker desktop from following links: . Windows: https://docs.docker.com/desktop/install/windows-install/ Mac: https://docs.docker.com/desktop/install/mac-install/. . Now, each time you want to make server, you need to start Docker desktop or make sure it running. Make sure you do this before building locally! . 2. (For Windows) Set up Docker with WSL . For Windows, to set up Docker with WSL use https://docs.docker.com/desktop/windows/wsl/. . (Optional) Download Docker extension in VSCode . VSCode has an extension too make it easier to manage docker containers and images directly in your IDE. To download, go to the Extensions tab of VSCode (left bar, or Ctrl+Shift+X), search “Docker” and download the extension from Microsoft. You should now see a docker icon on the left bar, which you can click on to see your Docker connections. . 3. Using VSCode Terminal, run: make server . In the local repository, make sure you are cd’ed to the base/root directory (i.e. where the Makefile is). For Ellen that was the ap-csa-fastpages directory as pictured. For Mr M, cd ~/vscode/APCSA sets him in his APCSA repository, here the make server command will work if Docker is running. . . The Makefile contains common aliased commands for building and serving your fastpages locally. If you look inside the file or run make in terminal, you can see what docker commands it can run. . . Specifically, we are interested in the make server command, which will build the container the first time and start the Jekyll server. If you remember from APCSP, Jekyll is what powers Github pages behind the scenes. You can build your GitHub Pages site locally using Jekyll to preview and test changes to your site. . Special steps for Windows . The first time, you might get this issue: . . If that’s the case, make sure this setting is toggled on in Docker desktop settings: . . It should ask you to reload and if you run the command again it should work now. . 4. View blog . After running, look for link to run Server. For me, this was http://127.0.0.1:4000/{repo name}: . Server address: http://127.0.0.1:4000/ . Server running… press ctrl-c to stop. . Shift-click server address to launch in Browser. . Leave the server running!!! . Make edits in VSCode and save the file. On each save, watch terminal in VSCode to see updates and regeneration of WebSite. . Refresh or click to Web page of change and you will see updates almost instantly. Refer to VSCode terminal to see any error encountered when running your server. As indicated ctrl-c will stop the server, however, I have left it running for hours of edits, testing, and commits to GitHub. . Alert, when you are satisfied with local changes… you must ✔️Commit and Sync to GitHub. The local server is used to preview and test change prior to Sync. Only after Sync, will others be able to see your changes. . . Add to .gitignore . A side effect of building locally is that it converts all the .ipynb and .docx files to .md. This means that some files will have duplicates after building – one in .ipynb or .docx, another in .md form. . To avoid duplicates masters when pushing to github, add the md generated files from to the .gitignore. This can be done by right clicking md file when preparing commits. Below is a sample .gitignore. The 1st three lines should be universal to all fastpages projects, the other files are specific to your project. . # Ignore from local build settings.ini Gemfile.lock images/copied_from_nb/ _posts/2022-08-15-AP-anatomy.md _posts/2022-08-22-HM-anthony_and_sahil.md _posts/2022-08-22-TT-darkmode.md _posts/2022-08-22-AP-primitives.md _posts/2022-08-22-TT-bash_tutorial.md _posts/2022-08-29-AP-using_java_objects.md _posts/2022-09-05-AP-boolean_ifs.md _posts/2022-09-19-TT-js_tutorial.md _posts/2022-09-26-TT-rapidapi.md . Resources . https://github.com/fastai/fastpages/blob/master/_fastpages_docs/DEVELOPMENT.md .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/2022/09/05/fastpages-docker.html",
            "relUrl": "/2022/09/05/fastpages-docker.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Java Spring Backend",
            "content": "Tour of Backend . The backend description for this blog is minimal as there is NO backend business logic, this will come with a blog focussing on Spring MVC. Mastering Spring simple definitions is critical as the backend will get much more complicated. . Main.java . Main.java contains the Class that is used to bootstrap and launch a Spring application from a Java main method. By default it will load index.html. . // @SpringBootApplication annotation is key to building web applications with Java https://spring.io/projects/spring-boot @SpringBootApplication public class Main { // Starts a spring application as a stand-alone application from the main method public static void main(String[] args) { SpringApplication.run(Main.class, args); } } . Birds.java . This is about as simple as an @Controller can get, it loads a page for view only. Note the @GetMapping which is used to associate a Web URL (/birds) with a Java Method (public String birds()) . @Controller // HTTP requests are handled as a controller, using the @Controller annotation public class Birds { // CONTROLLER handles GET request for /birds, maps it to birds() method @GetMapping(&quot;/birds&quot;) public String birds() { // load HTML VIEW (birds.html) return &quot;birds&quot;; } } . Greet.java . Purpose of Greet is to allow user to change Hello, World! greeting. This page is VERY important to learn in order to master passing data from frontend to backend using @RequestParam with associated keys and values. The key “name” HTML input and is mapped to the Java using wrapper Class, String name. In the method, String name is made back into key value using model.addAttribute(“name”, name). In this example, nothing is altered in, but this provides feedback and response framework that can be used for more sophisticated applications. . @Controller // HTTP requests are handled as a controller, using the @Controller annotation public class Greet { // @GetMapping handles GET request for /greet, maps it to greeting() method @GetMapping(&quot;/greet&quot;) // @RequestParam handles variables binding to frontend, defaults, etc public String greeting(@RequestParam(name=&quot;name&quot;, required=false, defaultValue=&quot;World&quot;) String name, Model model) { // model attributes are visible to Thymeleaf when HTML is &quot;pre-processed&quot; model.addAttribute(&quot;name&quot;, name); // load HTML VIEW (greet.html) return &quot;greet&quot;; } } . Hacks . Using creativity and research, can you come up with something that alters Hello, World application. Perhaps a calculation, like counting words or letters in a phrase. .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/techtalk/spring_boot",
            "relUrl": "/techtalk/spring_boot",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "AWS Deployment Guide",
            "content": "Deployment Overview . Deploying a Web Application enables a Server to serve the components of a Web Application to clients. Deployment is the tools and service used to enable the Web Application on the Internet. The process of can use many different cloud servers, as well as choice in tools and services. . EC2: Amazon Web Services is a cloud computing platform that the PUSD district has provided for us to serve our Web Application. | GitHub: At this point in time, we should be aware that we are using GitHub is an open platform to share our Web Application code on the Internet. | Docker and docker-compose: To host a Web Application you need to prepare an environment that contains the Web Application code and all the dependencies (POM.xml for Java) Docker is an open platform for developing, shipping, and running applications. | Nginx: To find a Web Application on a server, there needs to be a process to listen for the Web request and direct it to the Web Application. Nginx is an open source software for web serving, reverse proxy, caching, load balancing, media streaming, and more. | Certbot: Web traffic on internet is reliably served over Secure Hyper Text Transfer Protocol (https). Certbot is a free, open source software tool for automatically using Let’s Encrypt certifications | DNS: Natively, the web works off of IP addresses. Domain Name Services (DNS) allows the assignment of a friendly name to our Web Server. This name is built into Nginx/Certbot configuration files. Freenom is the service used to register the nighthawkcodingsociety.com domain. | . Key/Values required as you go through these procedures . Listed are Keys, you need to obtain Values. It is important that you recognize the sample Values as you work through these procedures, then replace them with the Values that are specific to your use case. . GitHub HTTPS link: | IAM user: | EC2 name: | EC2 Public IPs: | DNS Name: | DNS Subdomain name(s) | Docker Port: | docker-compose, proxy pass Port: | docker-compose, docker Image: | Nginx server file(s): | . Amazon Web Services (AWS): Electric Cloud Compute (EC2) Setup . Preparing and AWS EC2 instance is the process of creating a cloud computer. This process starts by logging into your AWS IAM user, searching for EC2. . To get started, launch a new AWS EC2 instance to learn process and understand how to work with Linux. here are some key considerations. Choose an Amazon Machine Image (AMI), the class will be using Ubuntu you should check on last verified version with a Teacher before proceeding | When it comes to picking memory or disk it is VERY important to pick Free Tier. As stated, this will only be used for testing and then it will be disposed for cost efficiency. | When presented with access dialog for http and https, make sure you check these boxes. Remember you are making a Web application that will run over http and https. | Name the security group (.pem) file after your team. It may be necessary to use SSH to access your EC2 instance. | The remainder of the steps you can use the defaults, refer to AWS documentation for guidance: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html | At the end of this process you need to “Connect to Instance”. This will provide you a terminal like experience. | . | . Install packages . Terminal commands are shown, these commands will be run from Terminal after you connect to your EC2 name. . Update/Upgrade all packages on your EC2 . $ sudo apt update; sudo apt upgrade . Install Java Runtime Environment . $ sudo apt install default-jre $ java -version . Install Java Development Kit . $ sudo apt install default-jdk $ javac -version . Maven is required to build project . $ sudo apt update $ sudo apt upgrade $ sudo apt install maven $ mvn -version . Clone and Change Directory to project location . These commands move your Web Application code onto you EC2 cloud computer . $ cd $ git clone https://github.com/nighthawkcoders/spring_portfolio.git . Build the Web Service . These steps will require you test Maven build prior to the final deployment process. . Maven Build and Jar package command $ cd ~/spring_portfolio $ ./mvnw package . If Maven fails, try this and repeat Maven command $ sudo apt install -y dos2unix $ dos2unix ./mvnw $ chmod +x ./mvnw . | . | Run Java Application $ cd ~/spring_portfolio $ java -jar target/spring-0.0.1-SNAPSHOT.jar . | At this point we will type ctrl+c as we will now run a Docker File to do this step | . Create Dockerfile to run Web Service . A Dockerfile is a configuration used to run the Web Service. This is placed in a file called Dockerfile. It is best to add this to VS Code and pull it, or you can update in place with nano, vi, or vim editor and use command line commands to push it into your repository. The Dockerfile should be considered Code! . Edit the Dockerfile $ nano Dockerfile . | Insert the Dockerfile commands, note that they are similar to Bash commands performed earlier. Follow prompts on screen to save file when complete, look for Key/Value (GitHub HTTPS link) that requires change for your project. # syntax=docker/dockerfile:1 FROM openjdk:16-alpine3.13 WORKDIR /app RUN apk update &amp;&amp; apk upgrade &amp;&amp; apk add --no-cache git maven COPY . /app RUN ./mvnw package CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;target/spring-0.0.1-SNAPSHOT.jar&quot;] # EXPOSE port that is defined in spring_portfolio.git application.properties EXPOSE 8085 . | . Create docker-compose file share Web Service . A docker-compose file is a configuration used to share your Docker Web Service and resources with the Linux system. This file enable Linux to have access to the container and the persistent data application via the /volumes location. . Once again it is best to add the docker-compose.yml in VS Code and pull it. You can edit it on the machine itself using vi, vim, or nano. . Edit docker-compose.yml $ nano docker-compose.yml . | Change the docker-compose.yml Keys/Values. ports 8085:nnnn - Left 8085 is port to be used on system, by curl and Nginx config. | ports nnnn:8085 - Right 8085 is port exposed by Docker: EXPOSE 8085 | device /home/ubuntu/spring_portfolio/volumes - is my project defining a volumes directory for database and uploads outside of container yml version: ‘3’ services: web: image: java_springv1 build: . ports: “8085:8085” volumes: | persistent_volume:/app/volumes volumes: persistent_volume: driver: local driver_opts: o: bind type: none device: /home/ubuntu/spring_portfolio/volumes | . | . | . IF you cloned the repository after 9/8 you may have to change ports to 8085:8085 . Running Docker using docker-compose.yml . At this point, it is best to review complete files on GitHub and for Docker and docker-compose: https://github.com/nighthawkcoders/spring_portfolio. Review the Key/Values mentioned in this document. Make sure your Docker and docker-compose files a personalized to your project. . Make sure you are in project directory $ cd ~/spring_portfolio/ . | install docker-compose $ sudo apt install docker-compose -y . | Run docker-compose $ sudo docker-compose up -d . | Output from docker-compose. When running this command, docker-compose will run all the Docker steps and build a Web Application running in a Docker container, a virtual environment. | . Creating network &quot;spring_portfolio_default&quot; with the default driver Building web Step 1/9 : FROM openjdk:16-alpine3.13 &gt; d0ce03c9330c Step 2/9 : WORKDIR /app .... LOTS of STEPs and OUTPUT ... Successfully built 68d68ad9699b Successfully tagged ava_springv1:latest WARNING: Image for service web was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`. Creating flask_portfolio_web_1 ... done . Verifying Web Application via Docker commands . Here is a look at some of the commands behind the scenes. None of these are required to get things working, but show the results of the Docker and docker-compose.yml files and commands. . docker-compose ps The running Web process, “ps” is a linux command or option that provides information related to the processes on a system. Look at headings in relation to outputs of the docker-compose process. ubuntu@ip-172-31-1-138:~/flask_portfolio$ docker-compose ps Name Command State Ports -- ava_springv1 gunicorn main:app Up 0.0.0.0:8085-&gt;8080/tcp,:::8085-&gt;8080/tcp . | docker ps A more comprehensive list of all the docker processes on the system. In this process reports, many of the alternate projects running on this AWS server are show. The flask_portfolio_web_1 process is the items specific to this tutorial. buntu@ip-172-31-1-138:~/flask_portfolio$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 749a93bc11ce flask_port_v1 &quot;gunicorn main:app&quot; 45 minutes ago Up 45 minutes 0.0.0.0:8086-&gt;8080/tcp, :::8086-&gt;8080/tcp flask_portfolio_web_1 89155782b853 java_springv1 &quot;java -jar target/sp…&quot; 6 days ago Up 6 days 0.0.0.0:8085-&gt;8080/tcp, :::8085-&gt;8080/tcp spring_portfolio_web_1 9415d6397d2e python_cspv1 &quot;gunicorn main:app&quot; 2 weeks ago Up 2 weeks 0.0.0.0:8082-&gt;8080/tcp, :::8082-&gt;8080/tcp nighthawk_csp_web_1 4bf324458bf6 python_laxv1 &quot;gunicorn main:app&quot; 5 weeks ago Up 5 weeks 0.0.0.0:8084-&gt;8080/tcp, :::8084-&gt;8080/tcp lax_web_1 7a6dff6425e9 python_ctev1 &quot;gunicorn main:app&quot; 5 weeks ago Up 5 weeks 0.0.0.0:8083-&gt;8080/tcp, :::8083-&gt;8080/tcp cte_web_1 abd77b8e77af java_csav2 &quot;java -jar target/cs…&quot; 5 weeks ago Up 5 weeks 0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp nighthawk_csa_web_1 . | docker images This lists all of the docker images, or containers, that are used to serve the process shown above. The flask_port_v1 is the image created from the Docker file created in this tutorial. The image contains the running Web application. ubuntu@ip-172-31-1-138:~/flask_portfolio$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE flask_port_v1 latest 68d68ad9699b 51 minutes ago 1.01GB java_springv1 latest e85a584b1836 6 days ago 523MB python_laxv1 latest 713c84a30d3b 5 weeks ago 1.16GB python_ctev1 latest 1608eaee06c7 5 weeks ago 1.18GB python_cspv1 latest b9bb27be863b 5 weeks ago 1.12GB java_csav2 latest 4055a9fd5ea7 5 weeks ago 570MB python 3.9 d0ce03c9330c 7 weeks ago 915MB alpine latest e66264b98777 8 weeks ago 5.53MB openjdk 16-alpine3.13 2aa8569968b8 17 months ago 324MB . | . Preparing the Docker Web Application for Internet Access . There are a couple of steps to this preparation. We need to direct the internet to the Server running the Web Application, this is done using Domain Name Service (DNS). After being directed to the Web Server, the server needs to respond to the Hyper Text Transfer Protocol (HTTP), this will be manged by Nginx. Additionally, we will be required to support Secure HTTP (HTTPS), a utility called Certbot will augment our Nginx configuration with a certificate. . DNS provider and setup . Each student scrum team is required to learn how to obtain a DNS provider and setup an independent domain. However, the final set up will be using a Subdomain under nighthawkcodingsociety.com. . A picture is included to show key elements in setting up a domain with a DNS provider. The nighthawkcodingsociety.com is using Freenom as its service provider. As you build your own DNS server you will need to obtain your own IP address and domain. . This illustration is dependent on… . EC2 Public IPs: 3.233.212.71 | Docker Compose Port: 8085 | DNS Name: nighthawkcodingsociety.com | DNS Subdomain name(s): battleship.nighthawkcodingsociety.com. cowboys.nighthawkcodingsociety.com | . A minimum configuration will have the two “A” type definitions using you Public IP address. These two are resolved with a single Web Application. The “CNAME” type is used for subdomains, these will resolve to a different Web Application. . . Nginx install, configuration, and services . Each student scrum team will perform Nginx installation and setup on an AWS EC2 test server. The final configuration will be on AWS server managed by Teachers or Student DevOps Engineers. . Enable Nginx to retrieve Java Web Application on internet request (Reverse Proxy)! Make a server file located at /etc/nginx/sites-available/nighthawk. . Install Nginx on Ubuntu servers $ sudo apt install nginx . | Go to location of Nginx server configuration files $ cd /etc/nginx/sites-available . | Open editor to Create your own “Nginx server configuration” $ nano nighthawk . | Edit your own Nginx server configuration making modifications to primary server file (1 required): DNS Name(s): nighthawkcodingsociety.com www.nighthawkcodingsociety.com | docker-compose, proxy pass Port: 8085 | . | . server { listen 80; listen [::]:80; server_name nighthawkcodingsociety.com www.nighthawkcodingsociety.com; location / { proxy_pass http://localhost:8085; # Simple requests if ($request_method ~* &quot;(GET|POST)&quot;) { add_header &quot;Access-Control-Allow-Origin&quot; *; } # Preflight requests if ($request_method = OPTIONS ) { add_header &quot;Access-Control-Allow-Origin&quot; *; add_header &quot;Access-Control-Allow-Methods&quot; &quot;GET, POST, OPTIONS, HEAD&quot;; add_header &quot;Access-Control-Allow-Headers&quot; &quot;Authorization, Origin, X-Requested-With, Content-Type, Accept&quot;; return 200; } } } . Or, or in addition, edit your own Nginx server configuration making modifications to subdomain file (0 to many): DNS Name(s): spring.nighthawkcodingsociety.com | docker-compose, proxy pass Port: 8085 | . | . server { listen 80; listen [::]:80; server_name spring.nighthawkcodingsociety.com; location / { proxy_pass http://localhost:8085; # Simple requests if ($request_method ~* &quot;(GET|POST|PUT)&quot;) { add_header &quot;Access-Control-Allow-Origin&quot; *; } # Preflight requests if ($request_method = OPTIONS ) { add_header &quot;Access-Control-Allow-Origin&quot; *; add_header &quot;Access-Control-Allow-Methods&quot; &quot;GET, POST, OPTIONS, PUT, HEAD&quot;; add_header &quot;Access-Control-Allow-Headers&quot; &quot;Authorization, Origin, X-Requested-With, Content-Type, Accept&quot;; return 200; } } } . Activate/enabled Nginx server configuration: nginx configuration file: nighthawk | . | . $ sudo ln -s /etc/nginx/sites-available/nighthawk /etc/nginx/sites-enabled $ sudo nginx -t . If there are no errors, restart NGINX so the server is an endpoint to the internet: $ sudo systemctl restart nginx . | . Testing HTTP endpoint . Before finishing, this is a good opportunity to test everything you have done. . Direct Test of Web Application Endpoint. This should return HTML related to the home page of the Web site. If this fails, you need to review Docker and docker-compose configurations. $ curl http://localhost:8085; . | Testing unsecure HTTP endpoint on the internet. Go to a browser an type your DNS domain: http://nighthawkcodingsociety.com. Timeout. This means something is wrong with EC2 Public IP. | Nginx Default page. This means DNS is working, but something is wrong with you Nginx configuration. | Broken Gateway. This means Nginx is working, but something is wrong with Web Application endpoint on machine, if this fails something is wrong with Web Application. This requires you to look at Docker and docker-compose configuration. | . | . Certbot install and configuration . Each student scrum team will learn Certbot on on AWS EC2 test server, establish working https web application. The final configuration will be on AWS server managed by Teachers or Student DevOps Engineers. . $ sudo snap install core; sudo snap refresh core $ sudo snap install --classic certbot $ sudo ln -s /snap/bin/certbot /usr/bin/certbot $ sudo certbot --nginx . Saving debug log to /var/log/letsencrypt/letsencrypt.log Plugins selected: Authenticator nginx, Installer nginx Which names would you like to activate HTTPS for? - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1: nighthawkcodingsociety.com 2: csa.nighthawkcodingsociety.com 3: csp.nighthawkcodingsociety.com 4: flm.nighthawkcodingsociety.com - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Select the appropriate numbers separated by commas and/or spaces, or leave input blank to select all options shown (Enter &#39;c&#39; to cancel): Cert not yet due for renewal You have an existing certificate that has exactly the same domains or certificate name you requested and isn&#39;t close to expiry. (ref: /etc/letsencrypt/renewal/nighthawkcodingsociety.com-0001.conf) What would you like to do? - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1: Attempt to reinstall this existing certificate 2: Renew &amp; replace the cert (limit ~5 per 7 days) - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Select the appropriate number [1-2] then [enter] (press &#39;c&#39; to cancel): 2 Renewing an existing certificate Performing the following challenges: http-01 challenge for nighthawkcodingsociety.com http-01 challenge for csa.nighthawkcodingsociety.com http-01 challenge for cso.nighthawkcodingsociety.com http-01 challenge for flm.nighthawkcodingsociety.com Waiting for verification... Cleaning up challenges Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_society Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_csa Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_csp Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_flm Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1: No redirect - Make no further changes to the webserver configuration. 2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for new sites, or if you&#39;re confident your site works on HTTPS. You can undo this change by editing your web server&#39;s configuration. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Select the appropriate number [1-2] then [enter] (press &#39;c&#39; to cancel): 2 Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_society Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_csa Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_csp Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_flm - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Your existing certificate has been successfully renewed, and the new certificate has been installed. The new certificate covers the following domains: https://nighthawkcodingsociety.com, https://csa.nighthawkcodingsociety.com, https://csp.nighthawkcodingsociety.com, and https://flm.nighthawkcodingsociety.com, You should test your configuration at: https://www.ssllabs.com/ssltest/analyze.html?d=nighthawkcodingsociety.com https://www.ssllabs.com/ssltest/analyze.html?d=csa.nighthawkcodingsociety.com https://www.ssllabs.com/ssltest/analyze.html?d=csp.nighthawkcodingsociety.com https://www.ssllabs.com/ssltest/analyze.html?d=flm.nighthawkcodingsociety.com - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/nighthawkcodingsociety.com-0001/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/nighthawkcodingsociety.com-0001/privkey.pem Your cert will expire on 2022-03-06. To obtain a new or tweaked version of this certificate in the future, simply run certbot again with the &quot;certonly&quot; option. To non-interactively renew *all* of your certificates, run &quot;certbot renew&quot; - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let&#39;s Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le . After this is complete, Let’s Encrypt can be set up to renew certificates if expring within 30 days. This is accomplished using cron jobs (periodic jobs). In this case, we will run the job daily which checks &amp; updates the certificates . crontab -e # edit crontab file 0 12 * * * /usr/bin/certbot renew --quiet # add this line to the file (runs renew daily) . Update Deployment . This procedure is a very short, as much of the deployment performed is persistent on your EC2/Ubuntu. . Goto Project directory . Check your docker processes. Make sure git has nothing to commit. . $ cd ~/spring_portfolio/ $ docker-compose ps Name Command State Ports - spring_portfolio_web_1 java -jar target/spring-0. ... Up 0.0.0.0:8085-&gt;8080/tcp,:::8085-&gt;8080/tcp $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 89155782b853 java_springv1 &quot;java -jar target/sp…&quot; 8 weeks ago Up 8 weeks 0.0.0.0:8085-&gt;8080/tcp, :::8085-&gt;8080/tcp spring_portfolio_web_1 $ git status On branch master Your branch is up to date with &#39;origin/master&#39;. nothing to commit, working tree clean . Shutdown process and update source . Stop docker processes and git pull . $ docker-compose kill Killing spring_portfolio_web_1 ... done . At this point your server is down, look at it from browser . 502 Bad Gateway . Update code . ubuntu@ip-172-31-1-138:~/spring_portfolio$ git pull remote: Enumerating objects: 11, done. remote: Counting objects: 100% (11/11), done. remote: Compressing objects: 100% (3/3), done. remote: Total 6 (delta 2), reused 6 (delta 2), pack-reused 0 Unpacking objects: 100% (6/6), 562 bytes | 562.00 KiB/s, done. From https://github.com/nighthawkcoders/spring_portfolio c308ee0..c1f06f1 master -&gt; origin/master Updating c308ee0..c1f06f1 Fast-forward src/main/resources/application.properties | 4 +++- 1 file changed, 3 insertions(+), 1 deletion(-) . Rebuild and Restart Web Application . Force rebuild of docker container. This will take several minutes. . Note. There is extra opportunity here, for a better way, to do this by using cache and having github pull outside of container (volume?) | . $ docker-compose build --no-cache # this will take several minutes Building web Step 1/7 : FROM openjdk:16-alpine3.13 &gt; 2aa8569968b8 Step 2/7 : WORKDIR /app &gt; Running in 327ed1c61755 Removing intermediate container 327ed1c61755 &gt; 3769ad96350d Step 3/7 : RUN apk update &amp;&amp; apk upgrade &amp;&amp; apk add --no-cache git &gt; Running in 76646a4afae0 ... Lots of Output ... Downloaded from central: https://repo.maven.apache.org/maven2/org/codehaus/plexus/plexus-utils/3.2.1/plexus-utils-3.2.1.jar (262 kB at 246 kB/s) Downloaded from central: https://repo.maven.apache.org/maven2/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.4/org.eclipse.sisu.inject-0.3.4.jar (379 kB at 350 kB/s) [INFO] Replacing main artifact with repackaged archive [INFO] [INFO] BUILD SUCCESS [INFO] [INFO] Total time: 30.843 s [INFO] Finished at: 2022-09-11T19:44:18Z [INFO] Removing intermediate container f5f06740c57a &gt; 34e9da840534 Step 6/7 : CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;target/spring-0.0.1-SNAPSHOT.jar&quot;] &gt; Running in 5f29b55a0fdc Removing intermediate container 5f29b55a0fdc &gt; e299d92bd2e6 Step 7/7 : EXPOSE 8080 &gt; Running in 12b33cccbf0e Removing intermediate container 12b33cccbf0e &gt; e5b2b8c5644d Successfully built e5b2b8c5644d Successfully tagged java_springv1:latest## . Run docker-compose . $ docker-compose up -d Recreating spring_portfolio_web_1 ... done . Now server is up, test in Browser for recent change . Java Home Page . Setting up automatic deployment . This is how to do autoamtic deployment using GitHub actions, which can run code after a push is made. | First, a secret will need to be set up for your SSH key, in the Repository Settings &gt; Secrets create a new secret called SSH_KEY | This secret should contain the output of base64 -w 0 yourkeyfile.pem (this enccodes the key to ensure it uses ASCII characters) | GitHub Actions can be specified in the .github/workflows directory. In your repository create a file called .github/workflows/workflow.yml with the following content (this decodes the base64 key and then pulls code, builds docker container, and puts docker container up through SSH) name: Deploy to Server on: [push] jobs: AWS-Deploy: runs-on: ubuntu-latest steps: - run: echo $ | base64 -d &gt; key.pem - run: chmod 400 key.pem - run: ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@{your domain/ip} &#39;cd ~/projects/apcsa_spring; sudo git pull; sudo docker-compose build; sudo docker-compose down; sudo docker-compose up -d&#39; . | . FAQS for Problems . Setting up docker without sudo . Run the following commands to create a docker group &amp; add your user sudo groupadd docker sudo usermod -aG docker $USER . | May need to run the following commands if you previously used sudo (to giv3e yourself ownership of .docker) sudo chown &quot;$USER&quot;:&quot;$USER&quot; /home/&quot;$USER&quot;/.docker -R sudo chmod g+rwx &quot;$HOME/.docker&quot; -R . | For more information refer here | . Errors on docker-compose or curl . if “docker-compose” or “curl” are not working and you want to start over. This will clean up existing Docker container(s) and volume(s) and enable you to restart them. . If any of these steps fail, try “sudo” prefix to elevate permissions. | If commands are incomplete or something is missing, continue on. These commands are intended to cleanup Docker, missing means it is already cleaned up. | . cd into your spring portfolio project . $ cd ~/project . stop docker-compose processes . $ docker-compose down # try sudo if it fails . Remove container . $ docker ps # list all containers $ docker rm -f container-name # try sudo if it fails . Remove volume . $ docker volume ls # list all volumes $ docker volume rm volume-name # try sudo if it fails . Restart the containers using the following command . $ docker-compose up -d # try sudo if it fails . Use curl to test . $ curl http://localhost:8085; .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/techtalk/deploy",
            "relUrl": "/techtalk/deploy",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Backend Development",
            "content": "Plans Week 3 . Focus on lesson building and college board exam questions. . Monday: Holiday | Tuesday: Test Prep - Control Structures. Live Review. | Wednesday: Career Tech - Java Backend and Deployment | Thursday: Human Day - Focus, FRQ review | Friday: Code, Code, Code | . Points will be awarded on these weighted elements . Lesson on ifs and expressions . The hack on the blog provides guidance. . Deployment on AWS . Deployment is required for API and other labs that we are intending to do shortly. Each individual needs to show success in deployment. . Focus / Habits . As discussed formerly. I would like to see a Blog you are creating that describe your own interest and skills. Purpose of blog, is to build something that could be used for Resume or LinkedIn. For points… . Additionally, something for the week that shows your goals, efforts, and vocab. Highlight something that is new to your panning from watching Harvard video | . Live Grading. . Review Ticket. | Ensure you obtain both positive and constructive feedback on your goals and results. This goes with Harvard video. Provide feedback as well. | Every time requirements. Create a comment in this Points Blog.  Include crossover grades, crossover comments, and blog(s) used during week. | Be prepared to present fast, be clear, and show everything in under 5 minutes.  1 minute per person. | Jupyter Notebooks contain comments and markdown cells that describe work. | Output of Jupyter Notebook is required when posting the Blog. | . | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/week/3",
            "relUrl": "/week/3",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Focus and Habits",
            "content": "Psychology and the Good Life, by Laurie Santos . This video is very relevant to students. Laurie Santos is a professor at Yale has produced one of the most popular classes of all time at Yale (1 of 4 students take this class). . Teacher Notes . In my first watch of this video, right after 2021-2022 school year, these were my observations in improving the well being of Computer Science at Del Norte. . The Teacher needs to reduce academic stress on students. | The Teacher needs to convince Students to form habits of successful people, as discussed in the video. These habits need to be formed collaboratively between Teacher and Student. | Students need to strive to form an attitude of success for life. This takes effort and commitment. Similar to exercise analogies discussed in video. | In active discussions with Ms Naidu who taught at Del Norte in 2021-2022, we determined the biggest weakness in students our students is Collaboration, not Technical. | Laure Santos request that students be grateful for their current situation. | . Teacher Message . The AP Computer Science classes at Del Norte in 2022-2023 is structured to do most of the work in the classroom. Students, please prioritize the 4C habits: Collaboration, Communication, Critical Thinking and Creativity in classroom. Additionally, focus, ask questions, Code/Code/Code, and make mistakes. If you do these things, you are in danger of getting 90% on all your assignments. . Agile and Psychology of the Good Life . A lot of the methods in Agile, Sprints, and Scrums are helping to establish habits and focus. As Engineers, we need to learn to put concepts together! . Habit helpers: Stand-up meetings, Issues, Scrum Board, Review Tickets, Sprints | Focus helpers: Reviewing Issues, Pair Coding, Making mistakes, Fixing Bugs, Scrum accountability | Look at my interpretation of students history over the years. How could habits apply to you and your team(s) through 2023? | . Hacks . Watch and build a vocabulary about how to use the “Psychology and the Good Life” and maintain it on GH Pages. Think about glitches we have in our mind and how we adapt to those glitches. Here are some ideas… | Blog a note of gratitude to someone on campus and someone at home, record your experience in GH Pages. | Make a gratitude list in your Blog. | Think about some goals you should set. | Think about the goals in conjunction with happy people. | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/techtalk/focus",
            "relUrl": "/techtalk/focus",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Using Objects",
            "content": "Plans Week 2 . Focus on Using objects and finishing up Code.org OOP lesson. . Monday: Live Review | Tuesday: Test Prep - Using Objects | Wednesday: Tech Talk - Frontend | Thursday: Human Day - Anthony and Sahil blog | Friday: Code, Code, Code | . Points will be awarded on these three key elements . Code.org  . Individuals show evidence of completing Code.org through Section 15 or beyond. Create a Fastpages blog complete with Screen Grabs that highlight key learnings. . Discuss creating and Using Objects | Discuss extends | . Java Using Objects and PBL design . Background. Build a new Console or Desktop GUI lab showing an area of interest between you and your pair or even as 4s. Focus is using a the Java Math Class, Planning, and Creating. . In planning, the Teacher views Java as a backend language. So, the Console or Desktop UI could be used to serve as an administrative UI for backend developers. | Ultimately, for Trimester 1 N@tM final we will be building a Web frontend using the foundation provide by Fastpages. IMO, the best option for an Administrative UI would be Java using Spring/Spring Boot; but we may need something more rapid and centralized on Java. | . Action. Build a rapid Java based Administrative UI thinking about Math class and Math operations as a focus. A positive, would be starting to build something that you might be interested in for the Trimester N@tM final. - Make a Console application to visualize data from something like Math, Physics, using Jupyter Notebook and Scanner. - Make a Java Swing App and explore making a menu with a couple of unique interfaces showing different types of Math Calculators. - Idea of your choice . Live Grading Presentation.  . Each individual needs to perform their own work. However, I would like to see a plan that show you worked with Pair and/or Team. The presentation can be according to your own style, but consider the following… . A Live Review is expecting students to drive dialog and questions. Additionally, learn that Teacher likes: questions, discussion of failures, showing a progressive mindset. | Individual. Blogging or Issues that highlights key learnings and takeaways from Code.org | Pair/Team. Blogging or Issues that shows Math Library Project / Or Idea of Choice A shared repository, team or pair. My suggestion is using Spring Portfolio project as template, as this is the start to a backend project. In my projects, I have placed “hacks” directory inside of Spring project and it has worked fine. Later you may want to expand on ideas and make them serviceable via APIs. | Issues or Blog that show you have planned to divide up work between pair and team | Jupyter notebook or Posts that highlights key code requirements, consideration should be made to find or run it quickly. | . | Review and Review Ticket. Every time requirements. Create Comment in this Points Blog.  Include crossover grades, crossover comments, and blog(s) used during week. | Be prepared to present fast, be clear, and show everything in under 5 minutes.  3.5 minutes is preferred time for 4 people. | Jupyter Notebooks contain comments and markdown cells that describe work. | Output of Jupyter Notebook is required when posting the Blog. | . | . | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/2",
            "relUrl": "/points/2",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Fastpages via GitHub Pages",
            "content": "Tour of Fastpages . . GitHub Pages is a static site hosting service that takes files straight from a repository on GitHub,runs the files through a build process, and publishes a website. Fastpages is built on top of GitHub pages. Fastpages automates the process of creating blog posts, so you don’t have to manually run conversion scripts. This tour begins by looking at Explorer in VS Code. There are three automations to a GH Pages / Fastpages website... . _notebooks: jupyter .ipynb files. This allows building block of markdown, python, java, javascript into a jupyter notebook. | _posts: markdown .md files. This supports frontend web design with markdown, html, and javascript. | _word: word .docx files. This allows you to save Microsoft or Google documents into a docx format. Saving these directly to _word folder will streamline steps. | . Read more or review files in the fastpages README.md . . Resources . There are many resources, tutorials, and reference for building pages with HTML and Markdown. On these subjects, I would say learn it when you need it. Right clicking on Chrome provides View Page Source on any link on the Web. The APCSA/APCSP projects have many examples within these projects. Here are a couple of Web links I often find through google or refer to when looking for ideas … . HTML on W3Schools | Markdown Cheat Sheet | . Home Page . The Home page is sourced by the index.html file. This is the file to personalize and customize your Fastpages home page. BTW, index.html is the standard name for your web sites landing page. GH Pages / Fastpages builds allows you to mix Markdown and HTML&lt;/mark&gt; within the index.html file. . Sub Pages . Look under _pages folder within the Navigator. In this directory, there are several .md files. These allow a combination of HTML and Markdown. Observe that this project has prefix of 01, 02, 03 on the .md files allows control the order of menus from left to right… . 01_search.md: This provides a very cool search on the site. The search.md is renamed but the contents are untouched from fastpages project. | 02_tags.md: This provide a very cool tagging system that is related to the “categories: categoryname” that are seen at the top of all the GH Pages / Fastpages _posts. This tags.md is renamed but the contents are untouched from fastpages project. | 03_about.md: This page is left for your individual customization, similar to index.html | Developers can add .md file of choice and order according to preference. | . Images . Look under images folder and you will see files added to support the site. Some are for customization of the site others are for pages. . Site: favicon.ico, logo.png | Pages: agile.webp, apcsa.png | . GH Pages YAML files . The _config.yml has many strings and preferences that are specific to the site. The file is full of comments that describe what can be changed and what should remain untouched. Note, the .yml files will be seen again as we begin to deploy our own site with Docker. . Hacks . Personalize index.html file and build your own Fastpages / GH Pages for personal use throughout the year. . Add _pages/notes.md or _pages/vocab.md, insert between tags.md and about.md. Use this area to capture idea and terms throughout the year. | Add some personal study or work pages. Consider how you will use these in conjunction with notes/vocab pages, search, and tagging. Publish _notebook file | Publish _post file with image | Publish _docx file from Google Doc source | . | . Extra Credit . Consider using your home page for other subjects other than Computer Science. The searching and tagging features are very powerful and could help recall. .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/techtalk/fastpages",
            "relUrl": "/techtalk/fastpages",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Innovation - Pair Focus",
            "content": "Points Link . Innovation Sprint . Focus for the week is to get started on how you will use GitHub Pages and FastPages to capture your learning by blogging. Innovation is a time to explore, learn, and obtain skills needed to reach goals. Work with your pair to expand on your ideas, two heads is better than one. . Learning how to Check setup work using Bash | Capturing notes while building Fastpages/GitHub pages yearlong individual posts and notebooks. | Review and enhance the Anatomy of Java; code using Java Primitives according to hacks or your own ideas. | Establish positive PBL habits: a focused mindset in the classroom, using work habits to achieve success. Plan your day, maximize your class time. Anything below 75% productivity could impact your seed. | . Plans Week 1 . Discuss College Board Units 1 - 10; Discuss PBL; Innovate and Plan/Plan/Plan before Code/Code/Code. Always Code/Code/Code in classroom when schedule allows! Practice Pair Programming Habit of 30 minutes/30 minutes/1 commit each. . Monday: “Live Review” with pairs. Try to Check setup work using Bash | Tuesday: Test Prep - Discuss Unit 1: Primitive Data Types; College Board AP classroom overview; establish 10 week schedule to learn all 10 units. | Wednesday: Agile and Roles - Code/Code/Code. | Thursday: Fastpages - Code/Code/Code. | Friday: Code/Code/Code. | . Points and Tangibles . Points (see canvas), live reviews will be scheduled in class. Everything will be crossover or pair graded using a “Review Ticket” . Individual _posts: “Bash” _posts: “Focus and Habits” video from Yale _posts: “Personal Computer Plan” _notebooks: “Anatomy of Java” | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/week/1",
            "relUrl": "/week/1",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Windows VS Code and Kernels with Anaconda",
            "content": "Installing and Setting Up VS Code . This guide was created by Anthony Vo and Sahil Samar as they were having problems with VS Code and IPython. This was related to conflicting Tool dependencies that were introduced to their machines. . Install VS Code to edit your code Navigate to this site and install VS Code for Windows. . | Once it&#39;s downloaded, navigate to the left sidebar and click Extensions. Download some necessary extensions: . Java extensions to debug Java (Maven, Project Manager, Debugger, Extension Pack, and Test Runner for Java by Microsoft are good options) | Jupyter notebook extensions (Jupyter, Jupyter Keymap, and Jupyter Notebook Renderers by Microsoft are good options) | . | . . Installing and Setting Up Anaconda . Installing Anaconda to help configure and manage Jupyter kernels. Anaconda uses the concept of creating environments, it brings many tools into a simple setup. . Install Anaconda from their website. Follow the steps to install, and then open the Anaconda command prompt from your search bar. | . Run the following commands: . conda install jupyter jupyter notebook . . A website should pop up in your browser which contains your file hierarchy. This is the Anaconda Jupyter Notebook editor! You can edit notebooks from here, but we&#39;ll using VS Code to edit notebooks instead. . Installing IJava Kernel . To run Java on our notebooks, we need a Java kernel. Github user SpencerPark has created a Java kernel for us to use, as it notebooks do not support Java by default. . Navigate to SpencerPark&#39;s README and follow the instructions to install IJava. I would recommend following the steps under Install pre-built binary. | Ensure that running the command jupyter kernelspec list in your Anaconda prompt shows an output containing Java. | . Installing an Appropriate JDK for IJava . IJava requires a newer JDK, but some operating systems and Java downloads automatically come with JDK 8. This will help to make sure IJava works. . Go to this website and download the newest JDK. I downloaded the Windows/x64 build for JDK 18. Unzip the contents of the folder. Then, move the jdk folder from the extracted zip folder into C:/Program Files/Java. (Note: if you don&#39;t have Program Files/Java, then you&#39;ll need to download Java from Oracle or a different open source website) . | Next, edit the kernel.json file that comes with IJava for it to use the newly downloaded JDK. Run jupyter kernelspec list in the Anaconda prompt to find where the kernel is located (in my case, it&#39;s C: Users amv76 AppData Roaming jupyter kernels java). To access AppData, you can use Win + R and type in the command %appdata%. Open kernel.json (which might just be named kernel on your system) with VS Code. Replace the &quot;java&quot; argument with the path to your JDK, as seen below. . | . { &quot;argv&quot;: [ &quot;java&quot;, -&gt; &quot;C: Program Files Java jdk-18.0.2 bin java.exe&quot;, &quot;-jar&quot;, &quot;C: Users amv76 AppData Roaming jupyter kernels java/ijava-1.3.0.jar&quot;, &quot;{connection_file}&quot; ], &quot;display_name&quot;: &quot;Java&quot;, &quot;env&quot;: {}, &quot;interrupt_mode&quot;: &quot;message&quot;, &quot;language&quot;: &quot;java&quot; } . Make sure to use two instead of one , as one is an escape character and will not work in file paths. . Ending Checks and How to Run . Congratulations! You should now be able to run Java on Jupter Notebooks. To use Java, create a new notebook and switch the language from Python to Java. . . Setup JavaScript and Bash Kernels . Some other kernels for different languages . JavaScript:Installation Guide - Choose a method that works best for you (remember that Anaconda prompt help manage tools). Also note that you need the Desktop Development with C++ Workload for VS Code; you can download it by accessing Visual Studio Installer &gt; Modify and selecting Desktop Development with C++. | Bash: Go to Anaconda command prompt and input the following two lines of code: | . pip install bash_kernel python -m bash_kernel.install .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/techtalk/windows-install",
            "relUrl": "/techtalk/windows-install",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "VSCode Download with WSL",
            "content": "Instructions to Download Visual Studio Code Remote - WSL . Windows is the number one desktop operating system. However, Linux is a preferred standard for many developers. Using WSL you can develop in a Linux-based environment, use Linux-specific tool chains and utilities, and run and debug your Linux-based applications all from the comfort of Windows. This gives the developer on Windows the best of both worlds. . Download WSL . This section of the document is intended to get the WSL distribution of Ubuntu installed on you Windows PC. . Open a PowerShell. Enter WSL installation command at Prompt: wsl --install . | If you receive error the required operation requires elevation You will need to perform wsl install command again, but 1st elevate permissions using command: start-process PowerShell -verb runas | As it states in output in shell, you will need to reboot your computer. My suggestion is to select Restart or if available Update and Restart. | After booting up there are several things that could occur A Command or PowerShell prompt could automatically pop up prompting you for a username. Choose a username and password to create an account. | Some other event may occur. Make sure you establish password when requested. Verifying or take action in Command or Powershell, try these as C: Users &lt;username&gt;… | . Type wsl --list, you should see Ubuntu | If no Ubuntu, Type wsl --list --online, then use wsl --install -d Ubuntu | After success | . | After WSL install, verify the following before you continue: Open Command or Powershell, Run as your own user account. | . Type wsl, this should put you in a different looking prompt. From C: Users &lt;username&gt; to &lt;username&gt;@MSI: | If you ever need to elevate permission for installation sudo wsl, followed by your computer password. - Observe that drive changes from C: to /mnt/c when you change prompt from native Windows to WSL. | . | Download Visual Studio Code . Installing Visual Studio Code (VSCode) with the Remote extension lets you use the WSL as your full-time development environment right from VS Code . Install VSCode, Download VSCode Windows Version | When prompted to Select Additional Tasks during installation, be sure to check the Add to PATH option so you can easily open a folder in WSL using the VSCode code command. | Install the Remote Development extension pack | Opening up VSCode with WSL . Open a WSL terminal window (using the start menu item or by typing wsl from a command prompt / PowerShell) | Navigate to a folder you’d like to open in VS Code Here are some useful commands for our work cd ~ # takes you to your personal directory on Windows mkdir vscode # creates a folder to clone your repositories ls # views the content of the directory you are currently on cd ~/vscode # changes the directory to path for vscode files git clone https://github.com/nighthawkcoders/APCSP.git # clone repo cd APCSP # changes the directory to path for APCSP repos assets code . # opens APCSP in VSCode cd .. # changes the directory to the previous/parent directory git config --global user.email mygmail@gmail.com # tell git your email git config --global user.name mygithub # tell git your github id . | Type code . in the terminal. When doing this for the first time, you should see VS Code fetching components needed to run in WSL. This should only take a short while, and is only needed once. | Opening up VSCode with WSL terminal . Here is sample of steps with WSL equal to shay These steps will need to be adapted to your environment. . These two commands help git to understand your identity shay@MSI:/mnt/c/Users/ShayM$ git config --global user.email shay@gmail.com shay@MSI:/mnt/c/Users/ShayM$ git config --global user.name shay . | These commands clone a respository and load VSCode for work shay@MSI:/mnt/c/Users/ShayM$ mkdir vscode shay@MSI:/mnt/c/Users/ShayM$ cd vscode shay@MSI:/mnt/c/Users/ShayM/vscode$ git clone https://github.com/nighthawkcoders/APCSP.git Cloning into &#39;APCSP&#39;... remote: Enumerating objects: 8306, done. remote: Counting objects: 100% (2360/2360), done. remote: Compressing objects: 100% (723/723), done. remote: Total 8306 (delta 1312), reused 2305 (delta 1262), pack-reused 5946 Receiving objects: 100% (8306/8306), 16.27 MiB | 1.11 MiB/s, done. Resolving deltas: 100% (4360/4360), done. shay@MSI:/mnt/c/Users/ShayM/vscode$ cd APCSP shay@MSI:/mnt/c/Users/ShayM/vscode/APCSP$ code . Installing VS Code Server for x64 (6d9b74a70ca9c7733b29f0456fd8195364076dda) Downloading: 100% Unpacking: 100% Unpacked 2416 files and folders to /home/shay/.vscode-server/bin/6d9b74a70ca9c7733b29f0456fd8195364076dda. shay@MSI:/mnt/c/Users/ShayM/vscode$ . | . Setup Observation . VSCode with WSL shows a WSL indicator in the bottom left corner of Window. . Resource . Read more on WSL and VSCode VSCode doc .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/techtalk/vscode-wsl",
            "relUrl": "/techtalk/vscode-wsl",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Tools and Equipment",
            "content": "Tools and Equipment make Development Easy . Learning Development tools, working with Projects, is the key to a rapid entry into Code/Code/Coding. A Computer, Git, and an Code Editor are the starting points for coding. Add Jupyter Notebooks (computational documents) and you bridge Computer with Data Science. The beauty of Jupyter is that it creates a computational narrative, a document that allows code and data with visual analysis, hypothesis, and conjecture. . Computers using either MacOS, Windows, or Linux are requirements for the course. | GitHub, is Git hosted in the Cloud. It is the defacto hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere in the world. Think of it as the Google Docs for Coders. Version Control is the task of keeping a software system of many versions and configurations well organized. | Version Control History of files and changes in Version Control System (ie GitHub) is very important! Ultimately, any Coder will break things or delete things! Looking at older versions and configurations at a microscopic detail is sometimes the only way to unwind bugs. | . | Visual Studio Code (abbreviations VS Code, VSCode or VSC) is a powerful Code Editor. VSCode performs a lot of magic and automation behind the scenes to make your Code/Code/Coding life easier. There is a back-in-the-day story hear, but short version is VSCode qualifies, IMO, to be called and Integrated Development Environment (IDE). It allows you to Edit files, Build your Code, and Pull/Push Code from and to the GitHub. FYI, VSCode is new to APCS this year, former IDE’s used in CompSci classes include XCode, Eclipse, and IntelliJ. | Jupyter Documents (.ipynb) is a document format for creating and sharing computational documents. These documents allow you to compute segments of Python or Java code as you are taking notes. These are new to AP CS this year, but are viewed as very powerful in gaining a quick understanding of coding concepts. Jupyter documents are often called “notebooks”. | . Equipment, accounts and tools . A laptop, bring a laptop to class every day with the Development Tools installed on it. Computers issued by the School, ie Chromebook, are not effective because of the restrictions placed on adding software by PUSD. If you have any problems obtaining a Computer where you can install software!, please attend Office Hours immediately | GitHub Account, VSCode will be used to clone/push/pull changes. GitHub is where we store and share code in the cloud, think of Google Docs but for Code. | GitHub Pages will be used to host your personal web site, notes, and experiences. Review GitHub concepts 2-min https://www.youtube.com/watch?v=phGdqJB6ep0 | Jupyter Documents will be used in conjunction with GitHub Pages to build running Java Code in to your Technical Notes. Review Jupyter basics 6-min https://www.youtube.com/watch?v=3jZYC9rGrNg | Slack Account, install App on Laptop, get used to reading announcements. Slack is a messaging tool similar to Discord, the first year we had 35,000 message in a class. | Java is the key language you will be using in this class. Spring, Thymeleaf, HTML, CSS, JavaScript are the key supporting technicals you will be using to enhance your learning of Java. | VSCode is the code editor we will be using in this class. VSCode is more than and editor, it is called and Interactive Development Environment (IDE). | Anaconda is the environment manager. Conda is an open-source package and environment management system that runs on Windows, macOS, and Linux. | Homebrew for MacOS installs packages (Java, Python) you need for Development that Apple did not include. | Apt for WSL Ubuntu installs the packages (Java, Python) you need for Development that Ubuntu did not include. | AWS Account for cloud computing and deployment, account access will be provided by Teacher. AWS Cloud Computing and Electric Cloud Computing (EC2’s) will be used to Deploy and Support projects on the Internet. | . GitHub Account . Follow instruction https://docs.github.com/en/get-started/signing-up-for-github/signing-up-for-a-new-github-account. Use your own personal/permanent email… NOT SCHOOL!!! GitHub belong to you. | . MacOS 1st Time Developer . Python2 install on MacOS . Install Python2 | . VSCode install on MacOS. . Install VSCode | . Anaconda install on MacOS. . Download for MacOS: Anaconda | Run Install: Answer yes to questions | . Homebrew install on MacOS . Copy and Paste to Install from Terminal Homebrew Copy bash ... curl ... command using copy box on website | Launch terminal from search bar | Paste bash ... curl ... command into Terminal … | Make sure command starts, this should provide feedback/output in terminal and could take a long time, like 10-min, there could be a prompt in the middle, at about 5-minutes. Follow any on screen instructions provided in terminal output to finish. | . | Homebrew installs a tool called “brew” which helps add and manage developer packages on MacOS. | . At this point, the next task is to prepare for Jupyter Notebooks and Kernels. You must start a new Terminal. Now the Terminal prompt should be prefixed with (base). If not, you need to go back to Anaconda install. . Open new Terminal. If your prompt is not looking like this you need to back up. (base) iMac:~ jmort1021$ . | . Key Packages needed on MacOS . Close and Start a new terminal, run each command in Terminal $ brew list # list packages $ brew update # update package list $ brew upgrade # upgrade packages $ brew install git # install latest git $ brew install python # install python3 for development $ python --version # version of python3 installed $ brew install java # openjdk install $ java --version # version of runtime $ javac --version # version of compiler . | . Windows 1st Time Developer . VSCode install using WSL. Windows users have option to have best of Windows and Linux while developing within VSCode. . Install VSCode using WSL. | Required review, become familiar with Windows WSL development | . Anaconda install on WSL. . Try the exact commands in WSL Command / Powershell. | Only if there is a wget error… To find the latest Linux-x86 distribution scroll to the bottom of this page: https://www.anaconda.com/products/distribution. Change wget and Anaconda3 command based on new link. PS C: Users UserName&gt; wsl # Windows prompt to WSL command $ cd ~ $ wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh # Answer yes to all the prompts $ ./Anaconda3-2022.05-Linux-x86_64.sh . | . At this point, the next task is to prepare for Packages, Jupyter Notebooks, and Kernels. You must start a new WSL Command / Powershell. Now the WSL prompt should be prefixed with (base) from Anaconda install. If not, you need to go back to Anaconda install. . Open Command / Powershell. If you are not looking like this you need to back up. PS C: Users ShayM&gt; wsl # Windows prompt (base) shay@MSI:/mnt/c/Users/ShayM$ cd ~ # WSL prompt (base) shay@MSI:~$ # WSL home, best place to install files . | . Key Packages needing update on WSL Ubuntu . In a WSL Command / Powershell install Python3 $ sudo apt list # list packages $ sudo apt update # update package list $ sudo apt upgrade # upgrade packages $ sudo apt install python2 # install python2 for package dependencies $ sudo apt install python3 python3-pip # install python3 and pip3 for development $ python --version # version of python3 should be shown $ sudo apt install default-jdk default-jre # java install $ java --version # java runtime version $ javac --version # java compiler version $ sudo apt install unzip # unzip utility . | . Jupyter Install and Kernels (MacOs and WSL) . Install Jupyter and check kernels . (base) id:~$ conda --version (base) id:~$ conda install jupyter # install jupyter (base) id:~$ jupyter kernelspec list # list installed kernels Available kernels: python3 /home/shay/.local/share/jupyter/kernels/python3 . Install Bash kernel. . (base) id:~$ # start in home directory (base) id:~$ pip install bash_kernel # download bash kernel Collecting bash_kernel Downloading bash_kernel-0.7.2-py2.py3-none-any.whl (15 kB) Requirement already satisfied: pexpect&gt;=4.0 in ./anaconda3/lib/python3.9/site-packages (from bash_kernel) (4.8.0) Requirement already satisfied: ptyprocess&gt;=0.5 in ./anaconda3/lib/python3.9/site-packages (from pexpect&gt;=4.0-&gt;bash_kernel) (0.7.0) Installing collected packages: bash-kernel Successfully installed bash-kernel-0.7.2 (base) id:~$ python -m bash_kernel.install # install kernel Installing IPython kernel spec (base) id:~$ jupyter kernelspec list # list kernels Available kernels: bash /home/shay/.local/share/jupyter/kernels/bash python3 /home/shay/.local/share/jupyter/kernels/python3 . Install JavaScript kernel. Output not shown, answer y or yes to questions. . (base) id:~$ conda install nodejs # node is framework for JavaScript kernel (base) id:~$ npm -version # node package manager comes with nodejs (base) id:~$ npm install -g ijavascript # get the kernel (base) id:~$ ijsinstall # install javascript kernel (base) id:~$ jupyter kernelspec list # list kernels Available kernels: bash /home/shay/.local/share/jupyter/kernels/bash javascript /home/shay/.local/share/jupyter/kernels/javascript python3 /home/shay/.local/share/jupyter/kernels/python3 . Install Java kernel. . (base) id:~$ wget https://github.com/SpencerPark/IJava/releases/download/v1.3.0/ijava-1.3.0.zip # download IJava kernel as zip (base) id:~$ unzip ijava-1.3.0.zip # unzip downloaded IJava kernel (base) id:~$ python install.py --user # install IJava kernel (base) id:~$ jupyter kernelspec list # list kernels Available kernels: bash /home/shay/.local/share/jupyter/kernels/bash java /home/shay/.local/share/jupyter/kernels/java javascript /home/shay/.local/share/jupyter/kernels/javascript python3 /home/shay/.local/share/jupyter/kernels/python3 . Authors GitHub for IJava https://github.com/SpencerPark/IJava#install-pre-built-binary | . VSCode Fastpages Project . Start Pages/Fastpages from GitHub Setup Instructions . Recommended Video - 27 minutes | Verify GitHub pages is running | Clone and Open project in VSCode (base) id:~$ mkdir -p vscode # make a vscode directory (base) id:~$ cd vscode # change to the directory (base) id:~$ git clone https://github.com/nighthawkcoders/APCSA.git # change to your repo (base) id:~$ code . # open VSCode projects in directory . | Push a minor “markdown” change and Verify on GitHub https://code.visualstudio.com/docs/editor/versioncontrol#_git-support | Verify “markdown” change on GitHub Pages | Create a new Jupyter notebook and publish to _notebooks directory https://code.visualstudio.com/docs/datascience/jupyter-notebooks | . VSCode Marketplace and Extensions . . Visual Studio Code claims to provide just the tools a developer needs for a quick code-build-debug and version control cycle. It provides a Market Place for enhancements and more complex workflows. Before adding extensions, clone projects and see what is requested or added. Here are some extension that were added through that process or that I have added... . Extension Pack for Java, Debugger for Java: These are fundamental for Java Development | Jupyter: This supports build jupyter ipynb files from within VS Code | Code Spell Checker: Got to have it when building documents, particularly if you spell and typo like the Teacher. | IntelliCode: Got to have it when creating a code file, it will sense type of code by extension. Also, it help with syntax as you are coding. | Java / Spring behind the scenes: Language Support for Java, Maven for Java, Project Manager for Java, Spring Boot Dashboard, Spring Boot Extension Pack, Spring Initializr Java Support, Test Runner for Java | . Review Details in Marketplace for better explanation of purpose of the things explained above. There is a lot more! As you need Git help look at things like Git History and GitLens. Or, perhaps you enjoy Vim and want Vim emulation for editing, their is an extension for that. Later, there may be interest in AWS Toolkit or Deploy extensions. We will learn more about Marketplace Extensions as we do more. . . VSCode for Java . VS Code https://code.visualstudio.com/docs/languages/java Install the Coding Pack for Java | Install Extension Pack | Spring Boot Extension Pack | . | . VSCode Java Project . Start Java GitHub Repo from Template https://github.com/nighthawkcoders/spring_portfolio/generate VS Code Clone new GitHub Project | Run/Play your project from Main.java | In Chrome or browser, run localhost:8080 | Push a minor change and Verify on GitHub https://code.visualstudio.com/docs/editor/versioncontrol#_git-support | . | . Hacks . Students need to demonstrate all these tools running to Scrum Team and then the Teacher. Issues need to be worked out quickly. Before asking Teacher ask 3 other students. Do not delay in Tool Setup task, there will be no late makeup for points!!! Tool and Equipment setup is like attendance, without Tools and Equipment you are effectually absent. . Part 1 - FastpagesProvide a comment on this page to show Fastpages/GH Pages Web Server and Tool success | Hint. Make a simple comment “Working on it”. This can be edited by clicking on Time Stamp of post; at this point you will see triple dots (…); clicking dots provides an Edit option; clicking Edit takes you to a friendly “Markdown editor”. Enjoy this editor, my suggestion is build your entire message in thi editor and/or build personal message in Fastpages / GitHub pages “_post” and share the following. Share link to personal Fastpages / GitHub pages running on github.io. My suggestion is to change index.html to show it is really yours. | Share link to a new page (_posts) in your Fastpages project show use of Markdown and/or HTML fragments. You will need to learn special date requirements of a file as well as a little Markdown or HTML. | Share link to Python Jupyter notebook (_notebooks) showing usage of Python: print (“Hello”) | Share link to Java Jupyter notebook (_notebooks) showing usage of Java: System.out.println(“Hello”) | Capture image/screen capture of Fastpages project showing use of an Integrated Development Environment (VS Studio) | Share link showing your GitHub insights. This is your personal activity of commit history. | . | . Part 2 - Java Project - Screen Capture Java project running on personal laptop localhost:0.0.0.0:8080 - Share link of GitHub code commit Java on project .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/techtalk/tools",
            "relUrl": "/techtalk/tools",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "GUI with WSL",
            "content": "Guide on how to get GUI on WSL . Download VcXsrv on your windows computer and run the installer (I recommend to add a desktop icon during installation to easily access the application) | In a file explorer open C: Program Files VcXsrv and search for “xlaunch.exe” and open (Alternatively if you set up a desktop icon during installation you can double click on that instead) create a “multiple window display” with “start no client”, and make sure in extra settings to check “Disable access control”, then press next/finish | Open a WSL window and open the ~/.bashrc file in vscode (code ~/.bashrc) or with nano (nano ~/.bashrc), in this file add the following lines export DISPLAY=$(ip route list default | awk &#39;{print $3}&#39;):0 export LIBGL_ALWAYS_INDIRECT=1 . | REOPEN your WSL window, and THEN Run code ~/vscode/[name of apcsa repo] to open a vscode window with your apcsa repo | Run your code, you may need to click the following icon on your taskbar to see the gui | Note: If you are getting errors about “java.lang.NoClassDefFoundError: Could not initialize class java.awt.GraphicsEnvironment$LocalGE” . Run xhost +local: in WSL &amp; restart VSCode | See more details | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/2022/08/15/TT-gui-setup.html",
            "relUrl": "/2022/08/15/TT-gui-setup.html",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Introduction and Tools",
            "content": "Points Link . AP CSA COURSE OUTLINE . Methodology. Project Based Learning (PBL) | AP Classroom. The 10 Units of AP Computer Science A | Code.org curriculum challenges | . | Key Principles Leaning to Code Mini Labs on PBL, AP, and Code.org challenges | Programming, Algorithms, Databases, and APIs | Team and Individual Project which will highlight all 10 units, either academically or in interest fashion | . | Succeed on Exam Work with AP FRQs and MCQs | Work with Code.org segments to complement Test Prep | Student led Paper FRQs and MCQ analysis exercises | Review of Scores | . | Preparing for Internships, “Real World” Follow practices to becoming a software engineer | Collaboratively Build, Deploy and Host Web Pages | Establish “Real World” Scrum Team projectsPreference with Customer/Sponsor | Follow Agile methodology using GitHub, Issues and Projects tools | . | Become a Blogger Build individual GitHub Pages Web Site to _post Notes and Learnings | Learn to publish and share what you have learned | . | . | . “Real World” Projects . You, your pair, and your Scrum Team will collaboratively Build, deploy and host Web Site. This Web project contains Technicals learned throughout the Trimester. This will be done in increments. Each Monday an assignment will be given and the previous will be under Live Review. . Feature Considerations for Project Project Requirements A fun zone, unique idea(s) | Educational zones that capture every key learning objective | A location that highlights individuals, jobs, and technical capabilities | . | Project Technicals Managing PBL Requirement for Project (Issues, Scrum Board) | Use of “Java Classes” in backend. | Use of “Thymeleaf” in frontend | Data Structure exchange between frontend and backend | . | . | Individual GitHub Pages considerations for Java Units 1-10 Each week we will be studying Java in Tech Talk and/or Test Prep | GH Pages should be used like notes to capture PBL and Java learnings each week! | Jupyter Notebooks using IJava and Markdown will be required to show Java learnings, Teacher likes running code! | . | . Establish PBL and Comp Sci attitude . Watch a video How I Would Learn To Code . Attitude. An Agile mindset is not knowing the answer, making lots of mistakes and performing iteration. A successful grade is dependent on making mistakes, research, and iteration. | Suggestion. Please bring a personal laptop to class daily. The Internet and AP Classroom web site will be considered text book. | Requirements. Everything will be distributed electronically. All code you develop will be delivered to the Cloud. | Grading guidelines. There will be key technical objectives which will require producing tangibles. Essentially, it is impossible to be late with work if you work consistently attend class, work in class and turn in progressive tangibles each week. Thus, failure to have work will result in a 10% deduction. Additionally, late work must be defended in office hours. High “A” is very tough to achieve, something beyond the tangible requirements. Something that exhibits an unforced desire to Code/Code/Code. | Low “A” is consistency in producing tangibles toward Team Project and Individual GH Page according to Issues and Scrum Board plans. Plans must be consistent with key objectives and technicals. | “B” is having flaws in consistency or tangible shortcomings, but mostly on track. A flaw would be mostly working code. | “C” is a lack consistent effort, lacking tangibles. Lack of producing working Code. | Below “C” is composed of Slash/Slash/Slash offenses. Lack of attendance, disruptive behaviors, doing work from other classes during class time, paper visible in class, and turning in tangibles that you can’t represent in live review. | . | . Assignments and Work . Assignments mostly Due either Friday or Monday at the start of class (canvas is official record for points) Live Grading that is complemented by Self/Crossover assessments. Teachers are passionate about quality crossover reviews. This a big part of your personal learning. Taking a review lightly is taking your grade lightly. | Always prepare Review Ticket (GH Issue) using canvas assignment as a guide | . | Trimester starts with 5 point seed (highly engaged +, extra activities +, distracted -) | There will be about 50 points per trimester, we will save a big chunk of points for the last few weeks of Trimester. Don’t get comfortable, keep working your CompSci muscles. | . PBL Sprint 0 / Week 0 . Learning outcome. Getting adapted to the Agile mindset used in Computer Science. Additionally, getting introduced to GitHub and VS Code. Building a Java/Spring Web Server on your localhost. Showing personal and running Fastpages/GitHub Pages. . Wednesday - “Introduction Sprint”. Pick pair share partner, Pick crossover pair, Establish team of four. Based off of modulo mathematics (remainder) there can only be 3 teams of 5 maximum. Spend some time talking and getting to know each other. Consider key jobs in Project/Scrum Teams such as Scrum Master (Issues, Scrum Board), DevOps (GitHub, Deployment, POM dependencies, Linux, Docker, Nginx), Frontend Developer (HTML, Fastpages with Theme, JavaScript, Thymeleaf), Backend Developer (Spring, Java, APIs, POJOs) | Thursday - Review “Tools and Equipment” and “Anatomy of Java”. Bringing your laptop. Setup GitHub and Tools and push code to your Repo. | Friday - Review “Roles, Issues, and Scrum Board”. Pair Share coding. Spend 30 minutes at keyboard installation and performing Jupyter coding, while Pair Share observes and consults. Next 30 minutes Pairs reverse roles. | . Equipment, accounts and tools . A laptop, that you bring to class every day with the Development Tools installed on it. | GitHub Account, VS Code will be used to push/pull changes. GitHub is where we store and share code in the cloud, think of Google Docs but for Code. | GitHub Pages will be used to host your personal web site, notes, and experiences. A blogging platform. | Jupyter Notebooks will be used in conjunction with GitHub Pages to build running Java Code in your Technical Notes. | Slack Account, install App on Laptop, get used to reading announcements. Slack is the tool will use for messaging, we have been averaging 35,000 message per class. | Java is the key language you will be using in this class. Spring, Thymeleaf, HTML, CSS, JavaScript are the key supporting technicals you will be using to enhance your learning of Java. | VS Code is the code editor we will be using in this class. VS Code is more than and editor, such tools are often called Interactive Development Environment (IDE). | AWS Account for deployment, this will be provided by Teacher. AWS Cloud Computing and Servers will be used to Deploy and Support projects. | . Extra Credit (Seed +) . Find the flaw Java/Spring project. Java Spring project uses Vanta Birds. When present on screen, the last element in drop down menu can’t be activated. This is often referred to as a ‘layering problem’. | Find the flaw in Java/Spring POM file dependencies. Switching to using Java 17 SDK an changing to Java 17 in POM file causes a compiler error. Try to negotiate the POM file incompatibility error. | Find the flaw in FastPage using VSCode and Jupyter. In my environment when editing Jupyter Notebook (ipynb file), I often receive many Output errors. They seem benign, but are annoying. | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/week/0",
            "relUrl": "/week/0",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Student Scoring on AP Exam",
            "content": "History of CSA AP Exams . 2022 . Paper exam in Gym, MCQs and FRQs . Some Scrum Teams were very connected and worked well within classroom, while others were often caught off task: doing work not related to classroom, or simply goofing off. One team resorted to plagiarism, scores were 3, 1, 1, the 4th member did not test. Another was out of focus on algorithmic requirements and spent too much time on presentation/frontend 4, 1, 1 and two did not test. | Teacher observed teams that were very active in assignments and collaboration 5, 5, 5, 4; 5, 5, 5, 3; 5, 5, 4, 4, and one did not test. | . | Test Prep Tuesday were polarized between hard working individuals those not paying attention. This resorted to Teacher leading Test Prep and abandoning what seemed successful in prior years, Student Led Test Prep. | Stats show there is essentially no middle in result data. Lots of lots of failure or one end, lots of success on the other. The lower scores were associated with people not handling responsibility of their own time in classroom, plus not doing work outside of class. | Adjustment for 2023 class will be ensuring everyone starts with their own digital portfolio; thus, individual checks will be in place out of the gate. | . . .   . 2021 . Pandemic and online exam in lock down browser, MCQs and FRQs . Adjustment from 2020 was that Scrum Teams were standardized at 4 to 5 people. Teams were very responsible throughout the year. | Students took on Student Led Test Prep Tuesday and produced prepared lessons. | The single student that received a 2 was a surprise to me as they were very active in the classroom. Very close to 100% passing. | Stats show there is no left in this graph, very successful class. | . . .   . 2020 . Pandemic and online exam, only FRQs . This was Mr Mortensen 1st year as Teacher | Scrum Teams were too large in some cases, but Teams seemed to be strong. A few people in larger groups were coat tailing, this caused standardization to teams of 4 and 5. | Students did a lot of async self-administered Test Prep in online groups. They had a big sense of reaching out to each other. | Stats show that most took opportunity. The lower scores were more associated with some students starting slow, partially Teacher not understanding how to reach toward those with less experience. At this time, an Intro class existed and there was some expectation of knowledge. | . . .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/unit/history",
            "relUrl": "/unit/history",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "UCSD Code.org Workshop Notes",
            "content": "Computer Science Principles A . Workshop Slides | UCSD Site | The Place for Computer Science A 2022 - UCSD | Code.org SignIn and the Code.org CSA Course | . Monday Sessions . People introductions. Much richer Teaching group. Mostly from San Diego area. Most think of the course as a mash up, meaning a complement to their knowledge and self made curriculum. . A lot on Code.org vision, big on equity word. The APCSA curriculum is brand new. Even the facilitators have not used it much. . 8 virtual support sessions 5-7pm in evening during school year. 2-Day Capstone in Summer. . Played with their runtime environment. It has proprietary libraries and imports from org.code (Code.org) . Draw a house design and detail discussion after. | / / / | | | | | | ———- . Add these to lessons. OOP - https://youtu.be/Wok4Xw_5cyY Creating Objects - https://youtu.be/C5Ks_u87Ltg . UML Diagram shown in slide. . Afternoon was spent playing with Painter object on Code.org platform. This was interesting as they had a pedagogy idea to teach Object Oriented programming write at the start. Could be a Unit 2 activity that is better than generic object activities that I am providing. . Tuesday Sessions . Slides for Day . We were instructed to make Pseudo code, however, with short duration and explanation… The 3 of us did not talk about how each drawing is a 4 block square. . Pseudo Code make PatternPainter class extended from PainterPlus setPaint(50) method paintRow while canMove paint move 2 face south (define it in PainterPlus) if canMove (built in) move face opposite (define it in PainterPlus) method paintMural while canMove call paintRow (above) . Starting down a more traditional lessons on assignments of variables. Also, show class and attributes being encapsulated. . Attributes of a Class . Hobby Class - Start Date - Hours - Dollars Spent Game extends Hobby - Console Type - Name - Cloud Play - Multi Player - Single Player . Wednesday Sessions . Wednesday was spent in Code.org Units 2 and 3. Mostly it was related to Class definitions and started to move into Lists and iteration. . Class Paper fold over for vocabulary. I suspected Student would not understand local and instance, new Teacher asked question on the subject. Another sponsored project idea. | Choosing you business, build a UML diagram. Example on desserts: Cookie, Cupcake, Pie | Bingo played and is interesting if administered correctly for vocabulary, this would be a great project that I would want to sponsor | Last was something that could be done in Jupyter, have a list and answer a question. All numbers larger than value… In this there were purposeful algorithmic errors. | . Thursday Sessions . Slides for Day .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/workshop/code_dot_org",
            "relUrl": "/workshop/code_dot_org",
            "date": " • Jul 29, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "JavaScript Tutorial",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . JavaScript Tutorial . console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Hello, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Anthony&#39;, ghID: &#39;tonyhieu&#39;, classOf: 2022, role: &#39;Student&#39; }, Person { name: &#39;Bria&#39;, ghID: &#39;B-G101&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Allie&#39;, ghID: &#39;xiaoa0&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Tigran&#39;, ghID: &#39;Tigran7&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Rebecca&#39;, ghID: &#39;Rebecca-123&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Vidhi&#39;, ghID: &#39;unknown&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Anthony | tonyhieu | 2022 | Student | Bria | B-G101 | 2023 | Student | Allie | xiaoa0 | 2023 | Student | Tigran | Tigran7 | 2023 | Student | Rebecca | Rebecca-123 | 2023 | Student | Vidhi | unknown | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/frontend/javascript",
            "relUrl": "/frontend/javascript",
            "date": " • Jul 19, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Calculator Starters",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . 0 1 2 3 + 4 5 6 - 7 8 9 * A/C 0 . =",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/frontend/calculator",
            "relUrl": "/frontend/calculator",
            "date": " • Jul 19, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Fetch of Backend Jokes",
            "content": "| Overview | Covid19 RapidAPI | Jokes API | Database CRUD | . Joke HaHa Boohoo .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/data/jokes",
            "relUrl": "/data/jokes",
            "date": " • Jul 10, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Database CRUD Operations",
            "content": "| Overview | Covid19 RapidAPI | Jokes API | Database CRUD | . Students . Name ID Age .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/data/database",
            "relUrl": "/data/database",
            "date": " • Jul 10, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Fetch of Covid19 data with RapidAPI",
            "content": "| Overview | Covid19 RapidAPI | Jokes API | Database CRUD | . Time All-time Cases Recorded Deaths Active Cases . | | | | Country All-time Cases Recorded Deaths Active Cases .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/data/covid",
            "relUrl": "/data/covid",
            "date": " • Jul 10, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Classic Snake Game",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Snake score: 0 . . Welcome to Snake, press space to begin . new game settings Game Over, press space to try again . new game settings Settings Screen, press space to go back to playing . new game Speed: Slow Normal Fast . Wall: On Off .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/frontend/snake",
            "relUrl": "/frontend/snake",
            "date": " • Jul 8, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Game of Life",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Remix of Game of Life . start step",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/frontend/life",
            "relUrl": "/frontend/life",
            "date": " • Jul 8, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Graphing App",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Graphing grid .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/frontend/graph",
            "relUrl": "/frontend/graph",
            "date": " • Jul 8, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Grade Calculator",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Grade Calculator . Total : 0.0 Count : 0.0 Average : 0.0 Input scores, press tab to add new number:",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/frontend/grades",
            "relUrl": "/frontend/grades",
            "date": " • Jul 8, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Binary Math",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Tri3 Overview - 2022 Spring review",
            "content": "Time Box Tri 3 . Week Dates Stand Up Theme Test Prep Tech Talk Canvas . Finals | June 6 - 9 | Finals Week | none | none | none | . 11 | May 31 - June 3 | PBL Customer Project Due | N@tM Wed 6/1 6-7:30pm | none | Project Final Review | . 10 | May 23 - 27 | Final Project Dev 2 | none | Spring Boot Security and Notes and Uploads | none | . 9 | May 16 - 20 | Final Project Dev 1 | none | Spring Boot Security and Many-to-One Notes | none | . 8 | May 9 - 13 | AP Week 2, Final Project Review 2 | none | Many-to-Many Relations Data | PBL Sponsor Requirements Presentations | . 7 | May 2 - 6 | AP Week 1, Final Project Review 1 | CSA Exam May 4th | none | PBL Classroom Requirements Presentations | . 6 | April 25 - 29 | CSA College Board Prep Week 2 | Proctored MCQ Tue, FRQ Th | none | Study Week 2 | . 5 | April 18 - 22 | CSA College Board Prep Week 1 | Proctored MCQ Tue, FRQ Thu | none | Study Week 1 | . Spring Break | April 11 - 15 | none | none | none | none | . 4 | April 4 - 8 | Data Structures Final | none | Crossover Coding Tue, Wed | Individual Data Structures Final | . 3 | March 28 - April 1 | Sorts | none | TT3 Sorts and Analysis | Sorts and Analysis | . 2 | March 21 - 25 | Calculator | none | TT2 Calculator, Stacks, ArrayLists | Data Structures Challenge 2 | . 1 | March 14 - 18 | Custom Java and Linked Lists | none | TT1 Linked Lists | Data Structures Challenge 1 | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/2022/06/14/TR300-historical_calendar.html",
            "relUrl": "/2022/06/14/TR300-historical_calendar.html",
            "date": " • Jun 14, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Week of 12/12, 2021-2022 Winter planning (for Teacher only)",
            "content": "Time Box Tri 2 . Week Stand Up Theme Test Prep Tech Talk Canvas . 11 | Finals Week | none | N@tM | PBL Final | . 10 | Surprise Test and Tri 3 Intro | none | TT10 | Final MCQ Test | . 9 | Student Tech Talks | none | TT9.1Search, TT9.2Sassy | PBL Part 1 | . 8 | Data Ops, Linked List of Objects | FRQ9 Books, FRQ10 GCF | TT8 | Pair/Trio Showing 2 | . 7 | Data Ops, Sorts | FRQ7 Users, FRQ8 Plots | TT7 | Pair/Trio Showing 1 | . 6 | Midterm, FRQs, and Ketchup | FRQ6, Enhanced for loop | TT6 | Mid Term FRQ and Vocab | . 5 | Data Ops, Generics | FRQ5, Invitation | TT5 | PBL Showing | . 4 | StringOps, Jekyll | FRQ4, Streak | TT4 | 3, 4, 5 | . 3 | TO DB Training | FRQ3, RSVP | TT3 | WIP Review | . 2 | Certbot, 1to1 | FRQ2, Light Sequence | TT2.1 TT2.2 | Home Pages | . 1 | SCCS, Async | None | TT1.1, TT1.2 | Project Approval | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/2022/06/14/TR200-historical_calendar.html",
            "relUrl": "/2022/06/14/TR200-historical_calendar.html",
            "date": " • Jun 14, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Curriculum Map David  2021 2022",
            "content": "PRIMITIVE TYPES . Variables and Data Types . Expressions and Assignment . Statements . Compound Assignment Operators . Casting and Ranges of Variables . Introduction to an Integrated Development Environment . Introduction to an IDE . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Short Programming Exercises Quizzes CollegeBoard Unit 1 Progress Checks . Summative . Unit Test Project . | Call System class methods to generate output to the console. Create String literals. . Identify the most appropriate data type category for a articular specification. . Declare variables of the correct types to represent primitive data. . Evaluate arithmetic expressions in a program code. Evaluate what is stored in a variable as a result of an expression with an assignment statement . Evaluate what is stored in a variable as a result of an expression with an assignment statement. Evaluate arithmetic expressions that use casting. . Create java projects in an Integrated Development Environment (Eclipse, VS Studio) . SKILLS (Define at the bottom of the document): 1.A, 1.B, 2.B, 4.B, 5.A . | C4.1 . C4.3 . C4.4 . C4.6 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . USING OBJECTS | | | | | . Objects: Instances of Classes . Creating and Storing Objects . Calling methods . String Objects and Literals . String Methods . Wrapper Classes: Integer, Double . Using the Math Class . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Programming Exercises Drawing Lab . Quizzes . CollegeBoard Unit 2 Progress Checks . Summative . Unit Test . | Explain the relationship between a class and an object. . Identify, using its signature, the correct constructor being called. Create objects by calling different constructors Define variables of the correct types to represent reference data. . Call non-static void methods with or without parameters. . Create String objects and use String class methods . Be familiar with the use of the Integer and Double wrapper classes. . Evaluate expressions that use the Math class methods. . Evaluate Boolean expressions that use relational operators in program code. . SKILLS: . 1.B, 1.C, 2.A, 2.C, 3.A, 5.A . | C4.7 . C4.8 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . BOOLEAN EXPRESSIONS AND IF STATEMENTS | | | | | . Boolean Expressions . if Statements and Control Flow . if-else Statements . else if Statements . Compound Boolean Expressions . Equivalent Boolean Expressions . Comparing Objects . Introduction to Graphic-User-Interface in java . | Assignments may differ at teacher discretion . Formative . Short Debugging Exercises Programming Exercises . Introduction to GitHub for Eclipse . Quizzes . CollegeBoard Unit 3 Progress Checks . Summative . Pong - First GUI-Based Program . Unit Test . | Represent branching logical processes by using conditional statements. . Compare and contrast equivalent Boolean expressions. . Compare object references using Boolean expressions in program code. . Follow starter code for a GUI-based java project . Write if-statements for keyboard input of a java program . Use java drawing methods to draw shapes in java . Complete a java program that uses a GUI for the simple game of Pong . SKILLS: . 2.A, 2.B, 3.A, 3.C, 4.A, 4.C . | C4.9 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ITERATION | | | | | . while Loops . for Loops . Developing Algorithms for Strings . Nested Iteration . Code Analysis . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions Short Debugging Exercises Programming Exercises . Quizzes . CollegeBoard Unit 4 Progress Checks . Summative . Unit Test . | Represent iterative processes using a while or for loop. . Identify, modify, and develop standard String-related algorithms . Represent nested iterative processes Compute statement execution counts and informal run-time comparison of iterative statements. . SKILLS: . 1.B, 2.B, 2.D, 3.C, 4.C, 5.C . | C4.9 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . WRITING CLASSES | | | | | . Anatomy of a Class . Constructors . Code Comments . Accessor/Getter Methods . Mutator/Setter Methods . Writing Methods . Static Variables and Methods . Scope and Access . this Keyword . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Short Debugging Exercises Programming Exercises Quizzes . Introduction to AP-Level FRQs Style 1 - Methods and Control Structures Introduction to AP-Level FRQs Style 2 - Classes . CollegeBoard Unit 5 Progress Checks . Summative . Unit Test . DuckHunt Project . | Designate access and visibility constraints to classes, data, constructors, and methods. . Designate private visibility of instance variables to encapsulate the attributes of an object. . Define instance variables for the attributes to be initialized through the constructors of a class. . Describe the functionality and use of program code through comments. . Define behaviors of an object through non-void methods without parameters written in a class. . Define behaviors of a class through static methods. . Define the static variables that belong to the class. . Explain where variables can be used in the program code. . Evaluate object reference expressions that use the keyword this . SKILLS: . 1.A,1.B, 1.C, 2.C, 3.B, 4.B, 5.A, 5.B, 5.D . | C4.5 . C4.8 . C4.11 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ARRAY | | | | | . Creation and Access . Traversing Arrays . Enhanced for Loops for Arrays . Reading, Modifying, and Developing Algorithms Using Arrays . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Debugging and Programming Exercises . Quizzes . CollegeBoard Unit 6 Progress Checks . Summative . Frogger / Agar.io Project . Unit Test . | Represent collections of related primitive or object reference data using one dimensional (1D) array objects. . Traverse the elements in a 1D array using a while, for, or enhanced for loop. . Identify, modify and develop array traversals algorithms. . Integrate 1D Arrays, Loops, and Objects into a GUI-Based java program. . SKILLS: . 1.C, 2.B, 4.B, 4.C, 5.D . | C4.7 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ARRAYLIST | | | | | . Introduction to ArrayList . ArrayList Methods . Traversing ArrayLists . Reading, Modifying and Developing Algorithms Using ArrayList . Searching - Sequential . Sorting: Insertion, Selection . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions Debugging &amp; Programming Exercises FRQ Practice (AP Prep) . Quizzes . Infection Simulation / Agar.io Clone Re-visited with ArrayList and dynamically adding objects into simulation . CollegeBoard Unit 7 Progress Checks . Summative . Unit Test . | Represent collections of related object reference data using ArrayList objects. . Traverse ArrayList objects using while, for, and enhanced loops. . Identify, modify and develop algorithms involving traversals Apply sequential/linear search algorithms to search for specific information in an array or ArrayList of . objects. . Apply selection sort and insertion sort algorithms to sort the elements of an array or ArrayList objects. . Compute statement execution counts and informal run-time comparison of sorting algorithms. . SKILLS: . 1.B, 2.C, 2.D, 5.C . | C4.7 . C4.10 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . 2D ARRAY | | | | | . Creation and Access . Traversing 2D Arrays . Reading, Modifying and Developing Algorithms using 2D Arrays . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions Debugging &amp; Programming Exercises . MagicSquares . FRQ Practice (AP Prep) . Quizzes . CollegeBoard Unit 8 Progress Checks Picture Lab / 2048 . Summative . Unit Test . | Represent collections of related primitive or object reference data using two-dimensional (2D) array objects. . Traverse 2D array objects using while, for, or enhanced for loops. . Identify or modify algorithms requiring 2D array traversals Write program code to create, traverse, and manipulate elements in 2D array objects. . SKILLS: . 1.B, 1.C, 2.B, 2.D, 4.A, . | C4.7 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . INHERITANCE | | | | | . Creating Superclasses and Subclasses . Writing Constructors for Subclasses . | Formative . Entry/Exit Slip Assessments . Participation . Discussions . Programming Exercises . Elevens Lab . Quizzes . CollegeBoard Unit 9 Progress Checks . Summative . Unit Test . | Create an inheritance relationship from a subclass to the superclass . Define reference variables of a superclass to be assigned to an object of a subclass in the same hierarchy. . Call methods in an inheritance relationship. Call Object class methods through inheritance. . SKILLS: . 1.A, 1.C, 3.A, 3.B, 5.A, 5.D . | C4.5 . C4.8 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . RECURSION | | | | | . Determining the result of recursive . methods . Writing simple recursive methods: . Determining base cases and recursive . calls . Recursive Traversals on ArrayLists . and Strings . Recursive Searching Algorithm: Binary Search . Recursive Sorting Algorithm: Merge Sort . | Assignments may differ at teacher discretion . Formative . Programming Exercises . Fractal Drawing in Java - Recursvely Drawing Shapes Recursive Method Tracing Exercises . Quizzes . CollegeBoard Unit 10 Progress Checks . Summative . Unit Test Group Project . | Apply recursive search algorithms to information in String, 1D array, or ArrayList objects. Apply recursive algorithms to sort elements of an array or ArrayList objects. Determine the result of executing recursive methods. . SKILLS: . 1.B, 2.B, 2.D, 5.A, . | C4.9 . C4.10 . C5.3 . C5.6 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ETHICAL COMPUTING | | | | | . Ethical and Social Implications of . Computing Systems . Ethical Issues Around Data Collection . | Formative . Discussions . | Explain the risks to privacy from collecting and storing personal data on computer systems. | C8.3 . C8.6 . C8.8 . C10.1 . | LS (11-12.1 to 11-12.6) . A-CED (1-4) . G-GPE (4-7) . G-MG (1, 3) . N-Q (1-3) N-CN (4-6) S-IC(1-6) S-MD (1-7) . | . SKILLS . 1.A  Determine an appropriate program design to solve a problem or accomplish a task. . 1.B  Determine code that would be used to complete code segments. . 1.C  Determine code that would be used to interact with completed program code. . | 2.A  Apply the meaning of specific operators. . 2.B  Determine the result or output based on statement execution order in a code segment without method calls (other than output). . 2.C  Determine the result or output based on the statement execution order in a code segment containing method calls. . 2.D  Determine the number of times a code segment will execute. . | 3.A  Write program code to create objects of a class and call methods. . 3.B  Write program code to define a new type by creating a class. . 3.C  Write program code to satisfy method specifications using expressions, conditional statements, and iterative statements. . 3.D  Write program code to create, traverse, and manipulate elements in a 1D array or ArrayList objects. . 3.E  Write program code to create, traverse, and manipulate elements in 2D array objects. . | 4.A Use test cases to find errors or validate results. . 4.B  Identify errors in program code. . 4.C  Determine if two or more code segments yield equivalent results . | 5.A  Describe the behavior of a given segment of program code. . 5.B  Explain why a code segment will not compile or work as intended. . 5.C  Explain how the result of program code changes, given a change to the initial code. . 5.D  Describe the initial conditions that must be met for a program segment to work as intended or described. . | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/2022/06/14/Curriculum-Map-David-2021-2022.html",
            "relUrl": "/2022/06/14/Curriculum-Map-David-2021-2022.html",
            "date": " • Jun 14, 2022"
        }
        
    
  
    
  
    
        ,"post44": {
            "title": "Bitcoin Hobby Mine 2021",
            "content": "This is only year where my Bitcoin Mine was real consistent. So far in 2022, the price has dropped significantly. Plus, I had some issues with the Mine that I did not correct for a couple of months. I expect to yield 1/2 or less. .               .   | Date | Bitcoin | USD Rate | USD | Electric, Waste, Internet, Irrigation | Profit | .   | 1/16/2021 | 0.023589 | $36318.79 | $856.72 | $456.42 | $400.30 | .   | 2/16/2021 | 0.034337 | $49228.48 | $1690.36 | $443.19 | $1247.17 | .   | 3/16/2021 | 0.024407 | $55749.94 | $1360.69 | $424.57 | $936.12 | .   | 4/16/2021 | 0.024891 | $61620.14 | $1533.79 | $411.57 | $1122.22 | .   | 5/16/2021 | 0.031278 | $35652.94 | $1115.15 | $385.80 | $729.35 | .   | 6/16/2021 | 0.029744 | $35886.19 | $1067.40 | $404.67 | $662.73 | .   | 7/16/2021 | 0.023861 | $31730.45 | $757.12 | $397.29 | $359.83 | .   | 8/16/2021 | 0.019816 | $45940.31 | $910.35 | $446.59 | $463.76 | .   | 9/16/2021 | 0.018246 | $47884.44 | $873.70 | $419.30 | $454.40 | .   | 10/16/2021 | 0.015192 | $60886.01 | $924.98 | $434.50 | $490.48 | .   | 11/16/2021 | 0.013775 | $59561.35 | $820.46 | $363.40 | $457.06 | .   | 12/16/2021 | 0.011817 | $46740.19 | $552.33 | $417.41 | $134.92 | .   |   |   |   |   |   |   | . Totals |   | 0.270953 | $47266.60 | $12463.05 | $5004.71 | $7458.34 | .   |   |   |   |   |   |   | .   | Month | Travel, Plane, Gas |   |   |   |   | . Built Trailor Shed | April | $517.58 | Drove up, Flew Home | 2 people |   |   | . Small House Residence | June-July | $1253.65 | Flew up, Drove Home | 3 people |   |   | .   |   |   |   |   |   |   | .   |   |   |   |   |   |   | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/hobby/bitcoin",
            "relUrl": "/hobby/bitcoin",
            "date": " • Jun 1, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "As it Was ~ Harry Styles",
            "content": "“Anti-hero” . “Taylor Swift scores one of the most historic weeks in the 64-year history of the Billboard Hot 100 songs chart, as she becomes the first artist to claim the survey’s entire top 10 in a single frame. . Swift surpasses Drake, who logged nine of the Hot 100’s top 10 for a week in September 2021. . Leading the way for Swift on the Hot 100, “Anti-Hero” launches at No. 1, marking her ninth career leader.” -Billboard .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/16",
            "relUrl": "/points/16",
            "date": " • Apr 1, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Quiz",
          "content": "Personality Quiz . Personality Quiz Previous Next",
          "url": "https://nighthawkcoders.github.io/RAYJ-final/quiz",
          "relUrl": "/quiz",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Login",
          "content": "Top Music Platorms . &lt;th:block layout:fragment=&quot;body&quot; th:remove=&quot;tag&quot;&gt; &lt;br&gt; &lt;h1 style=&quot;color:white;margin-top:3%&quot;&gt;Welcome back! Login or make a new account to get started!&lt;/h1&gt; &lt;br&gt; &lt;center&gt; &lt;form style=&quot;color: black&quot;&gt; &lt;label style=&quot;margin-top:5%&quot; for=&quot;email&quot;&gt;Email Address&lt;/label&gt; &lt;br&gt; &lt;input type=&quot;email&quot; class=&quot;form-control&quot; style=&quot;margin-top:2%;width: 25%&quot; id=&quot;email&quot; name=&quot;email&quot; required&gt; &lt;br&gt; &lt;br&gt; &lt;label for=&quot;pass&quot;&gt;Password (8 characters minimum):&lt;/label&gt; &lt;br&gt; &lt;input type=&quot;password&quot; class=&quot;form-control&quot; style=&quot;margin-top:2%;width: 25%&quot; id=&quot;pass&quot; name=&quot;password&quot;minlength=&quot;8&quot; required&gt; &lt;br&gt; &lt;br&gt; &lt;input type=&quot;submit&quot; class=&quot;btn btn-outline-dark&quot; value=&quot;Log-in&quot;&gt; &lt;br&gt; &lt;br&gt; &lt;div class=&quot;divider&quot;&gt; &lt;hr class=&quot;left&quot;/&gt; New User? &lt;hr class=&quot;right&quot;/&gt; &lt;p&gt; &lt;br&gt; &lt;a href=&quot;/signup&quot;&gt; Sign-Up&lt;/a&gt;&lt;/p&gt; &lt;br&gt; &lt;/div&gt; &lt;/form&gt; &lt;/center&gt; &lt;/body&gt; &lt;style&gt; h1 { text-align: center; font-size: 24px; } body { margin: 0; padding: 0; /* background: linear-gradient(to bottom right, #E3F0FF, #FAFCFF); */ height: 100vh; justify-content: center; align-items: center; background:linear-gradient(#0e071b, #230a4d); } form { width: 50%; height: 95%; background-color: #ffffff; border-radius: 20px; box-shadow: 0px 25px 40px rgb(190, 186, 238); } hr { width: 24% } .left { float:left; } .right { float:right; } .divider { width:500px; text-align:center; } .divider hr { margin-left:auto; margin-right:auto; width:40%; } &lt;/style&gt; &lt;!-- End of body content specific to page --&gt; . &lt;/th:block&gt; &lt;/body&gt; . &lt;/html&gt; .",
          "url": "https://nighthawkcoders.github.io/RAYJ-final/https:/peacekeeper6.github.io/RAYJ-final/login",
          "relUrl": "/https:/peacekeeper6.github.io/RAYJ-final/login",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "API",
          "content": "| Overview | Covid19 RapidAPI | Jokes API | Database CRUD | . &lt;/div&gt; .",
          "url": "https://nighthawkcoders.github.io/RAYJ-final/api",
          "relUrl": "/api",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "About",
          "content": "This site is built with fastpages . Key Links . GitHub Repos: github.com/nighthawkcoders, Spring Portfolio Template | AWS Deployments: csa.nighthawkcodingsociety.com | Slack: Join Link | 2021-2022 Archives: Fall, Early Winter, Late Winter, Spring | . .",
          "url": "https://nighthawkcoders.github.io/RAYJ-final/https:/peacekeeper6.github.io/RAYJ-final/about/",
          "relUrl": "/https:/peacekeeper6.github.io/RAYJ-final/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
      ,"page9": {
          "title": "Song Feedback",
          "content": "{% include nav_data.html %} . &lt;/div&gt; &lt;!DOCTYPE HTML&gt; . Songs Table . Songs Table . Song Likes Dislikes . . .",
          "url": "https://nighthawkcoders.github.io/RAYJ-final/https:/peacekeeper6.github.io/RAYJ-final/songfeedback",
          "relUrl": "/https:/peacekeeper6.github.io/RAYJ-final/songfeedback",
          "date": ""
      }
      
  

  
  

  
  

  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nighthawkcoders.github.io/RAYJ-final/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}