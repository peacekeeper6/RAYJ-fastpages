{
  
    
        "post0": {
            "title": "Anti-Hero by Taylor Swift",
            "content": "“Anti-hero” . “Taylor Swift scores one of the most historic weeks in the 64-year history of the Billboard Hot 100 songs chart, as she becomes the first artist to claim the survey’s entire top 10 in a single frame. . Swift surpasses Drake, who logged nine of the Hot 100’s top 10 for a week in September 2021. . Leading the way for Swift on the Hot 100, “Anti-Hero” launches at No. 1, marking her ninth career leader.” -Billboard .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/16",
            "relUrl": "/points/16",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "We Don't Talk About Bruno",
            "content": "“We don’t talk about Bruno” . “Maybe we’re not allowed to talk about him, but people were definitely listening to “Bruno,” with the secretive, salsa-tinged showstopper becoming only the second Hot 100 No. 1 from a Disney animated film, and the longest-running chart-topper (five weeks) for any song from a Disney movie. The song was built for repeat listening, with mile-a-minute lyrics and its finale of Les Miz-level vocal stacking. It even had its own TikTok trend, thanks to the meme-able way Camilo (Rhenzy Feliz) drawls those spooky “7-foot frame, rats along his back” lines. Basically, Lin-Manuel Miranda figured out how to make a song that perfectly advanced the Family Madrigal’s narrative, while also soundtracking countless school drop-offs and dramatic road-trip sing-alongs.” ~BillBoard .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/16",
            "relUrl": "/points/16",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Project Week 2",
            "content": "Plans Week 9 . Focus on PBL - Commitment to your Agile Development process and tangibles. . Monday: Review Student Led Homework (Period 2?) and Blog | Tuesday: Student Presentation | Wednesday: Student Presentation | Thursday: Show FE to BE working, Script for Video | Friday: Student Presentation | . Team . Prepare for Teacher project audit. Also, analysis of the following will speed Scrum Team plan, work, improve quality, and make a better N@tM final. . API Frontend to Backend Overview . Show demo of work in progress. . Must use API across multiple systems Create a HTML Frontend table or view fetching from Backend using an Spring API | Show writing to Database | . | . Scrum Master . Describe Program Purpose and Function. Also, highlight key system used to track, collaborate and review software. . Identify and Apply a Software Development process. Describe your Software Development Life Cycle | Describe how you plan, track sprints, track features, track milestones, and assign versions. | Highlight Agile process: research, design, coding, testing, review, repeat. | . | Define and analyze systems and software requirements. Define Computer Systems you have or will develop. | Indicate Tools or Automation you will use improve tracking requirements (ie Project/Scrum Board). | Define strategies that enable Team to target the specific needs of the customer (ie Product Owner). Describe meetings, demos, and how you collect feedback. | . | Test and Demo Software during each Sprint Consider using GitHub Issues to support this process. | Develop and describe expectations of each feature. | Use feature, expected outcome, and the minimal amount of code each feature. | Document accomplishment with tangible evidence. | Have feature reviews, demos, and obtain feedback (team and/or customer) | Update and derive new features and tasks for next step in Software Development Life Cycle | . | My suggestion is this person helps with Frontend development | . Frontend Developer . Describe Frontend designs and coding techniques. . Create and implement an effective frontend between humans and technology Show frontend design artifacts (wire frames) | Describe any consideration you have made for customer requirements. | Indicate accommodations you have made for English Language Learners or those with Disabilities | Show any screens that are currently developed. | . | Describe Code and Styles Frontend development HTML, Markdown, JavaScript | Cards, Tables, Blogging | . | Comments. Be sure to illustrate developers comments in code and how this will facilitate current and future understanding of the key portions of system. | . DevOps Engineer . Describe the technical systems and processes used to ensure the ability to do continuous updates and integration of software. . Describe software and programming tools Identify authoring tools (IDE’s, Docker, GitHub) used | Describe and/or show visuals of interactions and integration of programming languages, protocols, and data within project. For instance, deployed systems of Docker Images, Nginx, DNS hosting the application. | Describe and/or illustrate key Web Applications, APIs, and dependency systems that will be required to complete this system (Diagram). | . | Describe GitHub branch management and sociology used to ensure ability to perform continuous builds and integrations. GitHub projects | Branching Strategies | Deployment processes and automation | . | Describe how to validate and test the complete system | My suggestion is this person helps with Backend development | . Backend Developer . Describe backend coding and requirements. . Develop data, data types, databases, and APIs. Identify authoring tools (IDE’s, Postman) used. | Describe and/or illustrate key data types, data structures (Lists, Dictionaries), objects, files, or databases that will be used (Flow Chart/UML). | Describe use of Lists or Dictionaries, database, tables, attributes, records, and systems of access (JSON, Lists, Dictionaries). | . | Comments. Be sure developers use comments in code to facilitate current and future understanding of the key portions of system. | . Hacks (Video 1). Recommend… Minimize talking, minimize mouse movements, and share Tangibles. . Make a less than 4 minute video. Each individual should talk in video, code, and make their part of the video. Consider crossing over to other tables and share methods and methodologies of those working on similar roles. . Scrum Master should make sure all things come together. | DevOps should ensure there is a working project to Demo at all times. | Everyone should complete their part(s). | Everyone should help other Team Members when struggling. | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/9",
            "relUrl": "/points/9",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Project Week 1",
            "content": "Cancelled . Plans Week 8 . Focus on PBL - Commitment to your Agile Development process and tangibles. . Monday: Stand-up Meetings, Live Review | Tuesday: Code, Code, Code, Live Review | Wednesday: Unit 1 Student Presentation | Thursday: Unit 2 Student Presentation | Friday: Code, Code, Code | . Team Points . Prepare for CTE Auditors, Oct 20th. Additionally, this is recommendation season. Analysis of the following will speed Scrum Team work, improve quality of Recommendation, prepare you to discuss progress with auditors (if you are selected) and make a better N@tM final. Look at the following criteria… . Identify and Apply a Software Development process. Describe your Software Development Life Cycle | Describe how you plan, track sprints, track features, track milestones, and assign versions. | Highlight Agile process: research, design, coding, testing, review, repeat. | . | Define and analyze systems and software requirements. Define Computer Systems you will develop. | Indicate Tools or Automation you will use improve tracking requirements. | Define strategies that enable Team to target the specific needs of the customer (ie Product Owner)meetings, demos, and collecting feedback. | . | Create and implement and effective frontend between humans and technology Show frontend design artifacts (wire frames) | Describe any consideration you have made for customer needs. | Indicate accommodations you have made for English Language Learners or those with Disabilities | . | Develop software using programming languages Identify authoring tools (IDE’s, Docker) used | Describe and/or show visuals which interactions and integration of programming languages, protocols, and data within project (Flow Chart/UML). | Describe and/or illustrate key Procedures, Functions, Algorithms that will be required to complete this system (Flow Chart/UML). | Be sure to use comments in code to facilitate current and future understanding of the key portions of system. | . | Develop data, data types, databases, and APIs. Identify authoring tools (IDE’s, Postman) used. | Describe and/or illustrate key data types, data structures, objects, files, and databases that will be used (Flow Chart/UML). | Describe use of database, tables, attributes, records, and systems of access (POJOs, JPAs) | Be sure to use comments in code to facilitate current and future understanding of the key portions of data. | . | Test and Demo Software during each Sprint Consider using GitHub Issues to support this process. | Develop and describe expectations of each feature. | Use feature, expected outcome, and the minimal amount of code each feature. | Document accomplishment with tangible evidence. | Have feature reviews, demos, and obtain feedback (team and/or customer) | Update and derive new features and tasks for next step in Software Development Life Cycle | . | . Individual Points . Each individual should prepare for each Sprint and Reflection meeting on successes or failure within the project. Highlight things that involve the following… . Collaboration | Communication | Critical Thinking | Creativity | . Presenter Points . Assignments from Student Lectures. . Unit 1 | Unit 2 | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/8",
            "relUrl": "/points/8",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Last CB Topic - ArrayList",
            "content": "Plans Week 7 . Focus PBL approval - Focus on Databases, Queries (Lists) and Front-end to Back-end . Monday: Introductions and Scheduling for CB presentations, Live Review | Tuesday: Live Review, Tech Talk Part 1 - Backend, POJOS, and Lists | Wednesday: Live Review, Tech Talk Part 2 - Frontend to Backend | Thursday: Human Prep - GitHub | Friday: Code, Code, Code | . List and ArrayLists (Pair) . Show usage of Lists interfaces in a Jupyter Notebook example. Try using List interface and making a ArrayList object. Consider using an example that will be part of interest or final projects. This will probably become your favorite Data Structure in Java. . add(int index, element) This method is used to add an element at a particular index in the list. When a single parameter is passed, it simply adds the element at the end of the list. | addAll(int index, Collection collection) This method is used to add all the elements in the given collection to the list. When a single parameter is passed, it adds all the elements of the given collection at the end of the list. | size() This method is used to return the size of the list. | clear() This method is used to remove all the elements in the list. However, the reference of the list created is still stored. | remove(int index) This method removes an element from the specified index. It shifts subsequent elements(if any) to left and decreases their indexes by 1. | remove(element) This method is used to remove the first occurrence of the given element in the list. | get(int index) This method returns elements at the specified index. | set(int index, element) This method replaces elements at a given index with the new element. This function returns the element which was just replaced by a new element. | indexOf(element) This method returns the first occurrence of the given element or -1 if the element is not present in the list. | lastIndexOf(element) This method returns the last occurrence of the given element or -1 if the element is not present in the list. | equals(element) This method is used to compare the equality of the given element with the elements of the list. | hashCode() This method is used to return the hashcode value of the given list. | isEmpty() This method is used to check if the list is empty or not. It returns true if the list is empty, else false. | contains(element) This method is used to check if the list contains the given element or not. It returns true if the list contains the element. | containsAll(Collection collection) This method is used to check if the list contains all the collection of elements. | sort(Comparator comp) This method is used to sort the elements of the list on the basis of the given comparator. | . Try to get a Front-end to Back-end example working (Team) . I am very excited about accessing data from one Web Application to Another. This is the basis of modern computing ‘microservice architecture’. . Highly maintainable and testable (learn to use Postman for APIs testing, learn to use Jupyter notebook for testing) | Loosely coupled (frontend and backend can be developed independently) | Independently deployable (frontend and backend are not in same GitHub project) | Owned by distinct and small teams (frontend and backend ) | . Live Grading Presentation.  . Two teams at a time in review. The review meeting would consist of 4 x 1.5 minute presentations on Notebooks and 2 x 3 minute presentations on FE to BE. Optimization is encouraged!!! . 5 meetings per class, 20 minutes per meeting. Meetings will be cutoff and 20 minutes. | Scoring .9x1 on Notebook, .9x1 on Team, .9x1 on Presentation and packing everything into 20 minutes. | The review may be more interesting is if you learn how to share microservice capabilities across teams. That would be impressive. | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/7",
            "relUrl": "/points/7",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "GitHub and Git Sociology",
            "content": ". GitHub and Git . GitHub.com was launched in April 2008 by Tom Preston-Werner, Chris Wanstrath, P. J. Hyett and Scott Chaco. GitHub is a subsidiary of Microsoft since 2018 (kind of ironic with Git quote below), but GitHub is not Git it helps manage the server or backend. . Linus Torvalds invented Linux and about 2005 invented Git. Quotes by Linus: . “Talk is cheap. Show me the code.” | “Most good programmers do programming not because they expect to get paid or get adulation by the public, but because it is fun to program.” | Microsoft isn’t evil; they just make really crappy operating systems. | . In our environments, Git is local and it works with GitHub/Git is in the cloud. Together these tools together have become an industry standard since about 2015. Formerly in industry we used tools like (ClearCase and Perforce), before the 90s we had home brewed systems. Kind of like making smart backups of files. . Terms and Usage . A brief review of key commands and concepts. . A “git clone” makes a local Git repository (decentralized) from the cloud server (GitHub/Git). | A .git directory contains a local database (see illustration) that keeps track of local changes. | A “git commit” makes a child snapshot of the original parent on the local database. Git commits over time are a series of Secure Hashing Algorithms (SHA’s). This is the math behind a git snapshot. | The .gitignore file tells .git to ignore certain files in directory tree (ie files constructed from source or derived files, like ipynb files that turn into md files). | The “git push” command moves files from local system back to cloud server (GitHub). However, often a merge is required as the decentralized system can have many simultaneous contributors. Students will experience this when they share a repository. | To minimize conflicts, Developers use Git branches and/or GitHub Forks to push code to an isolated locations on the server/cloud. This simply delays the inevitable merge, but has benefit of keeping developers branch of project stable. | Pull requests is common process used to merge code from isolated Fork back to the primary GitHub repository. | A “git rebase” is a common command for Developer on an isolated Git branch to update their environment from the “main” branch. Often this is done prior to a “git push” back the “main” branch. | . Project Based Learning . In Project Based Learning, it is required that you have a policy on Contributing Guidelines. Many student have already experienced problems of merging and managing change, by editing code GitHub directly, while editing code on VSCode locally. This will be an every day occurrence when starting a GitHub/Git sociology. Thus, teams need to create a policy to communicate how Scrum Team or Others should contribute to your project. . GitHub and VSCode | . Hacks . Any sociology questions within team need to be answered with a Blog, A Scrum Master working with other Developers should establish the Github administration/sociology policies: . What is the main repository for your project? | Did you create a .gitignore to avoid committing files that ‘don’t belong in version control? Look at this tool for guidance. | Have you established Issues as part of your Development process? Creating Issues | Have you considered making Pull Requests to track development? Create Pull Request | Have you considered forks or branching techniques with pull requests? Link Issue to PR | Are you managing Issues on a Project Board/Scrum Board like Kanban? Tracking Issues | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/techtalk/github",
            "relUrl": "/techtalk/github",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Windows VS Code and Kernels with Anaconda",
            "content": "Installing and Setting Up VS Code . This guide was created by Anthony Vo and Sahil Samar as they were having problems with VS Code and IPython. This was related to conflicting Tool dependencies that were introduced to their machines. . Install VS Code to edit your code Navigate to this site and install VS Code for Windows. . | Once it&#39;s downloaded, navigate to the left sidebar and click Extensions. Download some necessary extensions: . Java extensions to debug Java (Maven, Project Manager, Debugger, Extension Pack, and Test Runner for Java by Microsoft are good options) | Jupyter notebook extensions (Jupyter, Jupyter Keymap, and Jupyter Notebook Renderers by Microsoft are good options) | . | . . Installing and Setting Up Anaconda . Installing Anaconda to help configure and manage Jupyter kernels. Anaconda uses the concept of creating environments, it brings many tools into a simple setup. . Install Anaconda from their website. Follow the steps to install, and then open the Anaconda command prompt from your search bar. | . Run the following commands: . conda install jupyter jupyter notebook . . A website should pop up in your browser which contains your file hierarchy. This is the Anaconda Jupyter Notebook editor! You can edit notebooks from here, but we&#39;ll using VS Code to edit notebooks instead. . Installing IJava Kernel . To run Java on our notebooks, we need a Java kernel. Github user SpencerPark has created a Java kernel for us to use, as it notebooks do not support Java by default. . Navigate to SpencerPark&#39;s README and follow the instructions to install IJava. I would recommend following the steps under Install pre-built binary. | Ensure that running the command jupyter kernelspec list in your Anaconda prompt shows an output containing Java. | . Installing an Appropriate JDK for IJava . IJava requires a newer JDK, but some operating systems and Java downloads automatically come with JDK 8. This will help to make sure IJava works. . Go to this website and download the newest JDK. I downloaded the Windows/x64 build for JDK 18. Unzip the contents of the folder. Then, move the jdk folder from the extracted zip folder into C:/Program Files/Java. (Note: if you don&#39;t have Program Files/Java, then you&#39;ll need to download Java from Oracle or a different open source website) . | Next, edit the kernel.json file that comes with IJava for it to use the newly downloaded JDK. Run jupyter kernelspec list in the Anaconda prompt to find where the kernel is located (in my case, it&#39;s C: Users amv76 AppData Roaming jupyter kernels java). To access AppData, you can use Win + R and type in the command %appdata%. Open kernel.json (which might just be named kernel on your system) with VS Code. Replace the &quot;java&quot; argument with the path to your JDK, as seen below. . | . { &quot;argv&quot;: [ &quot;java&quot;, -&gt; &quot;C: Program Files Java jdk-18.0.2 bin java.exe&quot;, &quot;-jar&quot;, &quot;C: Users amv76 AppData Roaming jupyter kernels java/ijava-1.3.0.jar&quot;, &quot;{connection_file}&quot; ], &quot;display_name&quot;: &quot;Java&quot;, &quot;env&quot;: {}, &quot;interrupt_mode&quot;: &quot;message&quot;, &quot;language&quot;: &quot;java&quot; } . Make sure to use two instead of one , as one is an escape character and will not work in file paths. . Ending Checks and How to Run . Congratulations! You should now be able to run Java on Jupter Notebooks. To use Java, create a new notebook and switch the language from Python to Java. . . Setup JavaScript and Bash Kernels . Some other kernels for different languages . JavaScript:Installation Guide - Choose a method that works best for you (remember that Anaconda prompt help manage tools). Also note that you need the Desktop Development with C++ Workload for VS Code; you can download it by accessing Visual Studio Installer &gt; Modify and selecting Desktop Development with C++. | Bash: Go to Anaconda command prompt and input the following two lines of code: | . pip install bash_kernel python -m bash_kernel.install .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/techtalk/windows-install",
            "relUrl": "/techtalk/windows-install",
            "date": " • Aug 15, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Classic Snake Game",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Snake score: 0 . . Welcome to Snake, press space to begin . new game settings Game Over, press space to try again . new game settings Settings Screen, press space to go back to playing . new game Speed: Slow Normal Fast . Wall: On Off .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/frontend/snake",
            "relUrl": "/frontend/snake",
            "date": " • Jul 8, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Game of Life",
            "content": "| Overview | Tutorial | Calculator | Binary | Grades | Graph | Life | Snake | . Remix of Game of Life . start step",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/frontend/life",
            "relUrl": "/frontend/life",
            "date": " • Jul 8, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Curriculum Map David  2021 2022",
            "content": "PRIMITIVE TYPES . Variables and Data Types . Expressions and Assignment . Statements . Compound Assignment Operators . Casting and Ranges of Variables . Introduction to an Integrated Development Environment . Introduction to an IDE . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Short Programming Exercises Quizzes CollegeBoard Unit 1 Progress Checks . Summative . Unit Test Project . | Call System class methods to generate output to the console. Create String literals. . Identify the most appropriate data type category for a articular specification. . Declare variables of the correct types to represent primitive data. . Evaluate arithmetic expressions in a program code. Evaluate what is stored in a variable as a result of an expression with an assignment statement . Evaluate what is stored in a variable as a result of an expression with an assignment statement. Evaluate arithmetic expressions that use casting. . Create java projects in an Integrated Development Environment (Eclipse, VS Studio) . SKILLS (Define at the bottom of the document): 1.A, 1.B, 2.B, 4.B, 5.A . | C4.1 . C4.3 . C4.4 . C4.6 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . USING OBJECTS | | | | | . Objects: Instances of Classes . Creating and Storing Objects . Calling methods . String Objects and Literals . String Methods . Wrapper Classes: Integer, Double . Using the Math Class . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Programming Exercises Drawing Lab . Quizzes . CollegeBoard Unit 2 Progress Checks . Summative . Unit Test . | Explain the relationship between a class and an object. . Identify, using its signature, the correct constructor being called. Create objects by calling different constructors Define variables of the correct types to represent reference data. . Call non-static void methods with or without parameters. . Create String objects and use String class methods . Be familiar with the use of the Integer and Double wrapper classes. . Evaluate expressions that use the Math class methods. . Evaluate Boolean expressions that use relational operators in program code. . SKILLS: . 1.B, 1.C, 2.A, 2.C, 3.A, 5.A . | C4.7 . C4.8 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . BOOLEAN EXPRESSIONS AND IF STATEMENTS | | | | | . Boolean Expressions . if Statements and Control Flow . if-else Statements . else if Statements . Compound Boolean Expressions . Equivalent Boolean Expressions . Comparing Objects . Introduction to Graphic-User-Interface in java . | Assignments may differ at teacher discretion . Formative . Short Debugging Exercises Programming Exercises . Introduction to GitHub for Eclipse . Quizzes . CollegeBoard Unit 3 Progress Checks . Summative . Pong - First GUI-Based Program . Unit Test . | Represent branching logical processes by using conditional statements. . Compare and contrast equivalent Boolean expressions. . Compare object references using Boolean expressions in program code. . Follow starter code for a GUI-based java project . Write if-statements for keyboard input of a java program . Use java drawing methods to draw shapes in java . Complete a java program that uses a GUI for the simple game of Pong . SKILLS: . 2.A, 2.B, 3.A, 3.C, 4.A, 4.C . | C4.9 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ITERATION | | | | | . while Loops . for Loops . Developing Algorithms for Strings . Nested Iteration . Code Analysis . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions Short Debugging Exercises Programming Exercises . Quizzes . CollegeBoard Unit 4 Progress Checks . Summative . Unit Test . | Represent iterative processes using a while or for loop. . Identify, modify, and develop standard String-related algorithms . Represent nested iterative processes Compute statement execution counts and informal run-time comparison of iterative statements. . SKILLS: . 1.B, 2.B, 2.D, 3.C, 4.C, 5.C . | C4.9 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . WRITING CLASSES | | | | | . Anatomy of a Class . Constructors . Code Comments . Accessor/Getter Methods . Mutator/Setter Methods . Writing Methods . Static Variables and Methods . Scope and Access . this Keyword . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Short Debugging Exercises Programming Exercises Quizzes . Introduction to AP-Level FRQs Style 1 - Methods and Control Structures Introduction to AP-Level FRQs Style 2 - Classes . CollegeBoard Unit 5 Progress Checks . Summative . Unit Test . DuckHunt Project . | Designate access and visibility constraints to classes, data, constructors, and methods. . Designate private visibility of instance variables to encapsulate the attributes of an object. . Define instance variables for the attributes to be initialized through the constructors of a class. . Describe the functionality and use of program code through comments. . Define behaviors of an object through non-void methods without parameters written in a class. . Define behaviors of a class through static methods. . Define the static variables that belong to the class. . Explain where variables can be used in the program code. . Evaluate object reference expressions that use the keyword this . SKILLS: . 1.A,1.B, 1.C, 2.C, 3.B, 4.B, 5.A, 5.B, 5.D . | C4.5 . C4.8 . C4.11 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ARRAY | | | | | . Creation and Access . Traversing Arrays . Enhanced for Loops for Arrays . Reading, Modifying, and Developing Algorithms Using Arrays . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions . Debugging and Programming Exercises . Quizzes . CollegeBoard Unit 6 Progress Checks . Summative . Frogger / Agar.io Project . Unit Test . | Represent collections of related primitive or object reference data using one dimensional (1D) array objects. . Traverse the elements in a 1D array using a while, for, or enhanced for loop. . Identify, modify and develop array traversals algorithms. . Integrate 1D Arrays, Loops, and Objects into a GUI-Based java program. . SKILLS: . 1.C, 2.B, 4.B, 4.C, 5.D . | C4.7 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ARRAYLIST | | | | | . Introduction to ArrayList . ArrayList Methods . Traversing ArrayLists . Reading, Modifying and Developing Algorithms Using ArrayList . Searching - Sequential . Sorting: Insertion, Selection . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions Debugging &amp; Programming Exercises FRQ Practice (AP Prep) . Quizzes . Infection Simulation / Agar.io Clone Re-visited with ArrayList and dynamically adding objects into simulation . CollegeBoard Unit 7 Progress Checks . Summative . Unit Test . | Represent collections of related object reference data using ArrayList objects. . Traverse ArrayList objects using while, for, and enhanced loops. . Identify, modify and develop algorithms involving traversals Apply sequential/linear search algorithms to search for specific information in an array or ArrayList of . objects. . Apply selection sort and insertion sort algorithms to sort the elements of an array or ArrayList objects. . Compute statement execution counts and informal run-time comparison of sorting algorithms. . SKILLS: . 1.B, 2.C, 2.D, 5.C . | C4.7 . C4.10 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . 2D ARRAY | | | | | . Creation and Access . Traversing 2D Arrays . Reading, Modifying and Developing Algorithms using 2D Arrays . | Assignments may differ at teacher discretion . Formative . Entry/Exit Slip Assessments . Participation . Discussions Debugging &amp; Programming Exercises . MagicSquares . FRQ Practice (AP Prep) . Quizzes . CollegeBoard Unit 8 Progress Checks Picture Lab / 2048 . Summative . Unit Test . | Represent collections of related primitive or object reference data using two-dimensional (2D) array objects. . Traverse 2D array objects using while, for, or enhanced for loops. . Identify or modify algorithms requiring 2D array traversals Write program code to create, traverse, and manipulate elements in 2D array objects. . SKILLS: . 1.B, 1.C, 2.B, 2.D, 4.A, . | C4.7 | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . INHERITANCE | | | | | . Creating Superclasses and Subclasses . Writing Constructors for Subclasses . | Formative . Entry/Exit Slip Assessments . Participation . Discussions . Programming Exercises . Elevens Lab . Quizzes . CollegeBoard Unit 9 Progress Checks . Summative . Unit Test . | Create an inheritance relationship from a subclass to the superclass . Define reference variables of a superclass to be assigned to an object of a subclass in the same hierarchy. . Call methods in an inheritance relationship. Call Object class methods through inheritance. . SKILLS: . 1.A, 1.C, 3.A, 3.B, 5.A, 5.D . | C4.5 . C4.8 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) . S-ID(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . RECURSION | | | | | . Determining the result of recursive . methods . Writing simple recursive methods: . Determining base cases and recursive . calls . Recursive Traversals on ArrayLists . and Strings . Recursive Searching Algorithm: Binary Search . Recursive Sorting Algorithm: Merge Sort . | Assignments may differ at teacher discretion . Formative . Programming Exercises . Fractal Drawing in Java - Recursvely Drawing Shapes Recursive Method Tracing Exercises . Quizzes . CollegeBoard Unit 10 Progress Checks . Summative . Unit Test Group Project . | Apply recursive search algorithms to information in String, 1D array, or ArrayList objects. Apply recursive algorithms to sort elements of an array or ArrayList objects. Determine the result of executing recursive methods. . SKILLS: . 1.B, 2.B, 2.D, 5.A, . | C4.9 . C4.10 . C5.3 . C5.6 . | LS (11-12.1 to 11-12.6) . RSIT (11-12.1 to 12.7) . WS (11 - 12.1 to 12.6, 12.8, 12.9) . A-CED (1-4) . A-REI (1-2) F-IF (1-10) . F-LE (5-6) . C (5) . G-CO (6-8, 12) G-GMD (1-3, 5) . G-GPE (4-7) . G-MG (1, 3) G-SRT (1-3) N-RN (1-2) . N-Q (1-3) N-CN (4-6) N-VM (6-12) S-IC(1-6) S-MD (1-7) . APPS (10, 15, 16) . | . ETHICAL COMPUTING | | | | | . Ethical and Social Implications of . Computing Systems . Ethical Issues Around Data Collection . | Formative . Discussions . | Explain the risks to privacy from collecting and storing personal data on computer systems. | C8.3 . C8.6 . C8.8 . C10.1 . | LS (11-12.1 to 11-12.6) . A-CED (1-4) . G-GPE (4-7) . G-MG (1, 3) . N-Q (1-3) N-CN (4-6) S-IC(1-6) S-MD (1-7) . | . SKILLS . 1.A  Determine an appropriate program design to solve a problem or accomplish a task. . 1.B  Determine code that would be used to complete code segments. . 1.C  Determine code that would be used to interact with completed program code. . | 2.A  Apply the meaning of specific operators. . 2.B  Determine the result or output based on statement execution order in a code segment without method calls (other than output). . 2.C  Determine the result or output based on the statement execution order in a code segment containing method calls. . 2.D  Determine the number of times a code segment will execute. . | 3.A  Write program code to create objects of a class and call methods. . 3.B  Write program code to define a new type by creating a class. . 3.C  Write program code to satisfy method specifications using expressions, conditional statements, and iterative statements. . 3.D  Write program code to create, traverse, and manipulate elements in a 1D array or ArrayList objects. . 3.E  Write program code to create, traverse, and manipulate elements in 2D array objects. . | 4.A Use test cases to find errors or validate results. . 4.B  Identify errors in program code. . 4.C  Determine if two or more code segments yield equivalent results . | 5.A  Describe the behavior of a given segment of program code. . 5.B  Explain why a code segment will not compile or work as intended. . 5.C  Explain how the result of program code changes, given a change to the initial code. . 5.D  Describe the initial conditions that must be met for a program segment to work as intended or described. . | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/2022/06/14/Curriculum-Map-David-2021-2022.html",
            "relUrl": "/2022/06/14/Curriculum-Map-David-2021-2022.html",
            "date": " • Jun 14, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Bitcoin Hobby Mine 2021",
            "content": "This is only year where my Bitcoin Mine was real consistent. So far in 2022, the price has dropped significantly. Plus, I had some issues with the Mine that I did not correct for a couple of months. I expect to yield 1/2 or less. .               .   | Date | Bitcoin | USD Rate | USD | Electric, Waste, Internet, Irrigation | Profit | .   | 1/16/2021 | 0.023589 | $36318.79 | $856.72 | $456.42 | $400.30 | .   | 2/16/2021 | 0.034337 | $49228.48 | $1690.36 | $443.19 | $1247.17 | .   | 3/16/2021 | 0.024407 | $55749.94 | $1360.69 | $424.57 | $936.12 | .   | 4/16/2021 | 0.024891 | $61620.14 | $1533.79 | $411.57 | $1122.22 | .   | 5/16/2021 | 0.031278 | $35652.94 | $1115.15 | $385.80 | $729.35 | .   | 6/16/2021 | 0.029744 | $35886.19 | $1067.40 | $404.67 | $662.73 | .   | 7/16/2021 | 0.023861 | $31730.45 | $757.12 | $397.29 | $359.83 | .   | 8/16/2021 | 0.019816 | $45940.31 | $910.35 | $446.59 | $463.76 | .   | 9/16/2021 | 0.018246 | $47884.44 | $873.70 | $419.30 | $454.40 | .   | 10/16/2021 | 0.015192 | $60886.01 | $924.98 | $434.50 | $490.48 | .   | 11/16/2021 | 0.013775 | $59561.35 | $820.46 | $363.40 | $457.06 | .   | 12/16/2021 | 0.011817 | $46740.19 | $552.33 | $417.41 | $134.92 | .   |   |   |   |   |   |   | . Totals |   | 0.270953 | $47266.60 | $12463.05 | $5004.71 | $7458.34 | .   |   |   |   |   |   |   | .   | Month | Travel, Plane, Gas |   |   |   |   | . Built Trailor Shed | April | $517.58 | Drove up, Flew Home | 2 people |   |   | . Small House Residence | June-July | $1253.65 | Flew up, Drove Home | 3 people |   |   | .   |   |   |   |   |   |   | .   |   |   |   |   |   |   | .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/hobby/bitcoin",
            "relUrl": "/hobby/bitcoin",
            "date": " • Jun 1, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "As it Was ~ Harry Styles",
            "content": "“Anti-hero” . “Taylor Swift scores one of the most historic weeks in the 64-year history of the Billboard Hot 100 songs chart, as she becomes the first artist to claim the survey’s entire top 10 in a single frame. . Swift surpasses Drake, who logged nine of the Hot 100’s top 10 for a week in September 2021. . Leading the way for Swift on the Hot 100, “Anti-Hero” launches at No. 1, marking her ninth career leader.” -Billboard .",
            "url": "https://nighthawkcoders.github.io/RAYJ-final/points/16",
            "relUrl": "/points/16",
            "date": " • Apr 1, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Quiz",
          "content": "Personality Quiz . Personality Quiz Previous Next",
          "url": "https://nighthawkcoders.github.io/RAYJ-final/quiz",
          "relUrl": "/quiz",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Login",
          "content": "Top Music Platorms . &lt;th:block layout:fragment=&quot;body&quot; th:remove=&quot;tag&quot;&gt; &lt;br&gt; &lt;h1 style=&quot;color:white;margin-top:3%&quot;&gt;Welcome back! Login or make a new account to get started!&lt;/h1&gt; &lt;br&gt; &lt;center&gt; &lt;form style=&quot;color: black&quot;&gt; &lt;label style=&quot;margin-top:5%&quot; for=&quot;email&quot;&gt;Email Address&lt;/label&gt; &lt;br&gt; &lt;input type=&quot;email&quot; class=&quot;form-control&quot; style=&quot;margin-top:2%;width: 25%&quot; id=&quot;email&quot; name=&quot;email&quot; required&gt; &lt;br&gt; &lt;br&gt; &lt;label for=&quot;pass&quot;&gt;Password (8 characters minimum):&lt;/label&gt; &lt;br&gt; &lt;input type=&quot;password&quot; class=&quot;form-control&quot; style=&quot;margin-top:2%;width: 25%&quot; id=&quot;pass&quot; name=&quot;password&quot;minlength=&quot;8&quot; required&gt; &lt;br&gt; &lt;br&gt; &lt;input type=&quot;submit&quot; class=&quot;btn btn-outline-dark&quot; value=&quot;Log-in&quot;&gt; &lt;br&gt; &lt;br&gt; &lt;div class=&quot;divider&quot;&gt; &lt;hr class=&quot;left&quot;/&gt; New User? &lt;hr class=&quot;right&quot;/&gt; &lt;p&gt; &lt;br&gt; &lt;a href=&quot;/signup&quot;&gt; Sign-Up&lt;/a&gt;&lt;/p&gt; &lt;br&gt; &lt;/div&gt; &lt;/form&gt; &lt;/center&gt; &lt;/body&gt; &lt;style&gt; h1 { text-align: center; font-size: 24px; } body { margin: 0; padding: 0; /* background: linear-gradient(to bottom right, #E3F0FF, #FAFCFF); */ height: 100vh; justify-content: center; align-items: center; background:linear-gradient(#0e071b, #230a4d); } form { width: 50%; height: 95%; background-color: #ffffff; border-radius: 20px; box-shadow: 0px 25px 40px rgb(190, 186, 238); } hr { width: 24% } .left { float:left; } .right { float:right; } .divider { width:500px; text-align:center; } .divider hr { margin-left:auto; margin-right:auto; width:40%; } &lt;/style&gt; &lt;!-- End of body content specific to page --&gt; . &lt;/th:block&gt; &lt;/body&gt; . &lt;/html&gt; .",
          "url": "https://nighthawkcoders.github.io/RAYJ-final/https:/peacekeeper6.github.io/RAYJ-final/login",
          "relUrl": "/https:/peacekeeper6.github.io/RAYJ-final/login",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "API",
          "content": "| Overview | Covid19 RapidAPI | Jokes API | Database CRUD | . &lt;/div&gt; .",
          "url": "https://nighthawkcoders.github.io/RAYJ-final/api",
          "relUrl": "/api",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "About",
          "content": "This site is built with fastpages . Key Links . GitHub Repos: github.com/nighthawkcoders, Spring Portfolio Template | AWS Deployments: csa.nighthawkcodingsociety.com | Slack: Join Link | 2021-2022 Archives: Fall, Early Winter, Late Winter, Spring | . .",
          "url": "https://nighthawkcoders.github.io/RAYJ-final/https:/peacekeeper6.github.io/RAYJ-final/about/",
          "relUrl": "/https:/peacekeeper6.github.io/RAYJ-final/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
      ,"page9": {
          "title": "Song Feedback",
          "content": "{% include nav_data.html %} . &lt;/div&gt; &lt;!DOCTYPE HTML&gt; . Songs Table . Songs Table . Song Likes Dislikes . . .",
          "url": "https://nighthawkcoders.github.io/RAYJ-final/https:/peacekeeper6.github.io/RAYJ-final/songfeedback",
          "relUrl": "/https:/peacekeeper6.github.io/RAYJ-final/songfeedback",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nighthawkcoders.github.io/RAYJ-final/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}